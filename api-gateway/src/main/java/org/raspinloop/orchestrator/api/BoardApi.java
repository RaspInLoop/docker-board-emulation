/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.raspinloop.orchestrator.api;

import java.util.Map;

import javax.validation.Valid;

import org.raspinloop.orchestrator.model.BoardIdResponse;
import org.raspinloop.orchestrator.model.Connectors;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-09T06:25:46.920Z[GMT]")
public interface BoardApi {

    @Operation(summary = "create an new board", description = "Adds a board.", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Board created", content = @Content(schema = @Schema(implementation = BoardIdResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "409", description = "an existing item already exists") })
    @RequestMapping(value = "/board",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BoardIdResponse> addBoard(@Parameter(in = ParameterIn.DEFAULT, description = "Board item to add", schema=@Schema()) @Valid @RequestBody Map<String, Object> body);


    @Operation(summary = "get a connector for a specified Board", description = "By passing in the appropriate id, you can list connectors of  fmu if available in your account ", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "list fmu's connectors", content = @Content(schema = @Schema(implementation = Connectors.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/board/{boardId}/connectors",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Connectors> readBoardConnectors(@Parameter(in = ParameterIn.PATH, description = "Board ID", required=true, schema=@Schema()) @PathVariable("boardId") String boardId);

    @Operation(summary = "get a specific board", description = "By passing in the appropriate id, you can get the related board", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "the board", content = @Content(schema = @Schema(implementation = Map.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/board/{boardId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Map<String, Object>> readBoard(@Parameter(in = ParameterIn.PATH, description = "Board ID", required=true, schema=@Schema()) @PathVariable("boardId") String boardId);

    
    
    @Operation(summary = "update a board", description = "Update a specified board", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Board updated"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "409", description = "an existing item already exists") })
    @RequestMapping(value = "/board/{boardId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateBoard(@Parameter(in = ParameterIn.PATH, description = "Board ID", required=true, schema=@Schema()) @PathVariable("boardId") String boardId, @Parameter(in = ParameterIn.DEFAULT, description = "Board item to add", schema=@Schema()) @Valid @RequestBody Map<String, Object> body);

}

