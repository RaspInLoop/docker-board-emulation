/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.raspinloop.orchestrator.api;

import org.raspinloop.orchestrator.model.Connectors;
import org.raspinloop.orchestrator.model.InlineResponse2012;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-09T06:25:46.920Z[GMT]")
public interface ModelApi {

    @Operation(summary = "upload an new simulation model", description = "Adds a simulation model to the the testbench", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Simulation model uploaded", content = @Content(schema = @Schema(implementation = InlineResponse2012.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "409", description = "an existing item already exists") })
    @RequestMapping(value = "/model/fmu",
        produces = { "application/json" }, 
        consumes = { "application/octet-stream" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2012> addSimulationModel(@Parameter(in = ParameterIn.DEFAULT, description = "Simulation FMU to add", schema=@Schema()) @Valid @RequestBody Object body);


    @Operation(summary = "get a specific FMU", description = "By passing in the appropriate id, you can get fmu if available in your account ", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "search results matching criteria", content = @Content(schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/model/fmu/{fmuId}",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> readSimulationFmu(@Parameter(in = ParameterIn.PATH, description = "Fmu ID", required=true, schema=@Schema()) @PathVariable("fmuId") Long fmuId);


    @Operation(summary = "get a connector for a specified FMU", description = "By passing in the appropriate id, you can list connectors of  fmu if available in your account ", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "list fmu's connectors", content = @Content(schema = @Schema(implementation = Connectors.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/model/fmu/{fmuId}/connectors",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Connectors> readSimulationFmuConnectors(@Parameter(in = ParameterIn.PATH, description = "Fmu ID", required=true, schema=@Schema()) @PathVariable("fmuId") Long fmuId);

}

