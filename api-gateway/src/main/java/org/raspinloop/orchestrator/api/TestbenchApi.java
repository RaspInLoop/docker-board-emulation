/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.raspinloop.orchestrator.api;

import javax.validation.Valid;

import org.raspinloop.orchestrator.model.Connections;
import org.raspinloop.orchestrator.model.Instrument;
import org.raspinloop.orchestrator.model.Simulation;
import org.raspinloop.orchestrator.model.SimulationStartParam;
import org.raspinloop.orchestrator.model.SimulationStatus;
import org.raspinloop.orchestrator.model.TestBenchIdResponse;
import org.raspinloop.orchestrator.model.TestBenchItem;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-09T06:25:46.920Z[GMT]")
public interface TestbenchApi {

	@Operation(summary = "create an new testBench", description = "Adds an testBench to the account", tags = {
			"users" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "TestBench created", content = @Content(schema = @Schema(implementation = TestBenchIdResponse.class))),

			@ApiResponse(responseCode = "400", description = "invalid input, object invalid"),

			@ApiResponse(responseCode = "409", description = "an existing item already exists") })
	@RequestMapping(value = "/testbench", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<TestBenchIdResponse> addTestBench(
			@Parameter(in = ParameterIn.DEFAULT, description = "TestBench item to add", schema = @Schema()) @Valid @RequestBody TestBenchItem body);

	@Operation(summary = "get connections between model, board and instruments", description = "By passing in the appropriate id, you can list connections between model, board and instruments. ", tags = {
			"users" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "connections", content = @Content(schema = @Schema(implementation = Connections.class))),

			@ApiResponse(responseCode = "400", description = "bad input parameter") })
	@RequestMapping(value = "/testbench/{testBenchId}/simulation/connections", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<Connections> readConnections(
			@Parameter(in = ParameterIn.PATH, description = "TestBench ID", required = true, schema = @Schema()) @PathVariable("testBenchId") String testBenchId);

	@Operation(summary = "get instrument", description = "By passing in the appropriate id, you can have the configuration of the instrument. ", tags = {
			"users" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "instrument", content = @Content(schema = @Schema(implementation = Instrument.class))),

			@ApiResponse(responseCode = "400", description = "bad input parameter") })
	@RequestMapping(value = "/testbench/{testBenchId}/simulation/instrument", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<Instrument> readInstrument(
			@Parameter(in = ParameterIn.PATH, description = "TestBench ID", required = true, schema = @Schema()) @PathVariable("testBenchId") String testBenchId);

	@Operation(summary = "get connections between model, board and instruments", description = "By passing in the appropriate id, you can list connections between model, board and instruments. ", tags = {
			"users" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "connections", content = @Content(schema = @Schema(implementation = Connections.class))),

			@ApiResponse(responseCode = "400", description = "bad input parameter") })
	@RequestMapping(value = "/testbench/{testBenchId}/simulation/instrument/connectors", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<Connections> readInstrumentConnections(
			@Parameter(in = ParameterIn.PATH, description = "TestBench ID", required = true, schema = @Schema()) @PathVariable("testBenchId") String testBenchId);

	@Operation(summary = "get a specific testbench", description = "By passing in the appropriate id, you can get testbench if available in your account ", tags = {
			"users" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "search results matching criteria", content = @Content(schema = @Schema(implementation = TestBenchItem.class))),

			@ApiResponse(responseCode = "400", description = "bad input parameter") })
	@RequestMapping(value = "/testbench/{testBenchId}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<TestBenchItem> readTestbench(
			@Parameter(in = ParameterIn.PATH, description = "TestBench ID", required = true, schema = @Schema()) @PathVariable("testBenchId") String testBenchId);

	@Operation(summary = "Query the simulation status", description = "Retrun the status of the simulation", tags = {
			"users" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Simulation status", content = @Content(schema = @Schema(implementation = SimulationStatus.class))) })
	@RequestMapping(value = "/testbench/{testBenchId}/simulation/status", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<SimulationStatus> simulationStatus(
			@Parameter(in = ParameterIn.PATH, description = "TestBench ID", required = true, schema = @Schema()) @PathVariable("testBenchId") String testBenchId);

	@Operation(summary = "Start a simulation", description = "Start a simulation with specified parameters", tags = {
			"users" })
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Simulation Started"),

			@ApiResponse(responseCode = "400", description = "invalid input, object invalid"),

			@ApiResponse(responseCode = "409", description = "an existing item already exists") })
	@RequestMapping(value = "/testbench/{testBenchId}/simulation/run", consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> startSimulation(
			@Parameter(in = ParameterIn.PATH, description = "TestBench ID", required = true, schema = @Schema()) @PathVariable("testBenchId") String testBenchId,
			@Parameter(in = ParameterIn.DEFAULT, description = "Simulation to configure", schema = @Schema()) @Valid @RequestBody SimulationStartParam body);

	@Operation(summary = "Stop a simulation", description = "Stop the specified simulation", tags = { "users" })
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Simulation Stopped") })
	@RequestMapping(value = "/testbench/{testBenchId}/simulation/stop", method = RequestMethod.POST)
	ResponseEntity<Void> stopSimulation(
			@Parameter(in = ParameterIn.PATH, description = "TestBench ID", required = true, schema = @Schema()) @PathVariable("testBenchId") String testBenchId);

	@Operation(summary = "Configure a simulation", description = "Specify the simulation part for the testbench", tags = {
			"users" })
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Simulation updated"),

			@ApiResponse(responseCode = "400", description = "invalid input, object invalid"),

			@ApiResponse(responseCode = "409", description = "an existing item already exists") })
	@RequestMapping(value = "/testbench/{testBenchId}/simulation", consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateSimulation(
			@Parameter(in = ParameterIn.PATH, description = "TestBench ID", required = true, schema = @Schema()) @PathVariable("testBenchId") String testBenchId,
			@Parameter(in = ParameterIn.DEFAULT, description = "Simulation to configure", schema = @Schema()) @Valid @RequestBody Simulation body);

}
