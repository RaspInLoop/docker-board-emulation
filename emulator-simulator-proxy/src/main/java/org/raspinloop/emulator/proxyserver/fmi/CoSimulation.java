/*******************************************************************************
 * Copyright 2018 RaspInLoop
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.raspinloop.emulator.proxyserver.fmi;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-01")
public class CoSimulation {

	public interface Iface {

		public java.lang.String getVersion() throws org.apache.thrift.TException;

		public java.lang.String getTypesPlatform() throws org.apache.thrift.TException;

		public Instance instanciate(java.lang.String instanceName, Type fmuType, java.lang.String fmuGUID,
				java.lang.String fmuResourceLocation, boolean visible, boolean loggingOn)
				throws org.apache.thrift.TException;

		public Status setupExperiment(Instance c, boolean toleranceDefined, double tolerance, double startTime,
				boolean stopTimeDefined, double stopTime) throws org.apache.thrift.TException;

		public Status enterInitializationMode(Instance c) throws org.apache.thrift.TException;

		public Status exitInitializationMode(Instance c) throws org.apache.thrift.TException;

		public Status terminate(Instance c) throws org.apache.thrift.TException;

		public Status reset(Instance c) throws org.apache.thrift.TException;

		public void freeInstance(Instance c) throws org.apache.thrift.TException;

		public java.util.List<java.lang.Double> getReal(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException;

		public java.util.List<java.lang.Integer> getInteger(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException;

		public java.util.List<java.lang.Boolean> getBoolean(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException;

		public java.util.List<java.lang.String> getString(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException;

		public Status setReal(Instance c, java.util.Map<java.lang.Integer, java.lang.Double> ref_values)
				throws org.apache.thrift.TException;

		public Status setInteger(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_values)
				throws org.apache.thrift.TException;

		public Status setBoolean(Instance c, java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values)
				throws org.apache.thrift.TException;

		public Status setString(Instance c, java.util.Map<java.lang.Integer, java.lang.String> ref_values)
				throws org.apache.thrift.TException;

		public Status setRealInputDerivatives(Instance c,
				java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) throws org.apache.thrift.TException;

		public Status setRealOutputDerivatives(Instance c,
				java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) throws org.apache.thrift.TException;

		public Status cancelStep(Instance c) throws org.apache.thrift.TException;

		public Status doStep(Instance c, double currentCommunicationPoint, double communicationStepSize,
				boolean noSetFMUStatePriorToCurrentPoint) throws org.apache.thrift.TException;

		public Status getStatus(Instance c, StatusKind s) throws org.apache.thrift.TException;

		public int getIntegerStatus(Instance c, StatusKind s) throws org.apache.thrift.TException;

		public double getRealStatus(Instance c, StatusKind s) throws org.apache.thrift.TException;

		public boolean getBooleanStatus(Instance c, StatusKind s) throws org.apache.thrift.TException;

		public java.lang.String getStringStatus(Instance c, StatusKind s) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void getVersion(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
				throws org.apache.thrift.TException;

		public void getTypesPlatform(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
				throws org.apache.thrift.TException;

		public void instanciate(java.lang.String instanceName, Type fmuType, java.lang.String fmuGUID,
				java.lang.String fmuResourceLocation, boolean visible, boolean loggingOn,
				org.apache.thrift.async.AsyncMethodCallback<Instance> resultHandler)
				throws org.apache.thrift.TException;

		public void setupExperiment(Instance c, boolean toleranceDefined, double tolerance, double startTime,
				boolean stopTimeDefined, double stopTime,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void enterInitializationMode(Instance c,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void exitInitializationMode(Instance c,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void terminate(Instance c, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
				throws org.apache.thrift.TException;

		public void reset(Instance c, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
				throws org.apache.thrift.TException;

		public void freeInstance(Instance c, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
				throws org.apache.thrift.TException;

		public void getReal(Instance c, java.util.List<java.lang.Integer> refs,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler)
				throws org.apache.thrift.TException;

		public void getInteger(Instance c, java.util.List<java.lang.Integer> refs,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler)
				throws org.apache.thrift.TException;

		public void getBoolean(Instance c, java.util.List<java.lang.Integer> refs,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Boolean>> resultHandler)
				throws org.apache.thrift.TException;

		public void getString(Instance c, java.util.List<java.lang.Integer> refs,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler)
				throws org.apache.thrift.TException;

		public void setReal(Instance c, java.util.Map<java.lang.Integer, java.lang.Double> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void setInteger(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void setBoolean(Instance c, java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void setString(Instance c, java.util.Map<java.lang.Integer, java.lang.String> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void setRealInputDerivatives(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void setRealOutputDerivatives(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void cancelStep(Instance c, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
				throws org.apache.thrift.TException;

		public void doStep(Instance c, double currentCommunicationPoint, double communicationStepSize,
				boolean noSetFMUStatePriorToCurrentPoint,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void getStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

		public void getIntegerStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
				throws org.apache.thrift.TException;

		public void getRealStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler)
				throws org.apache.thrift.TException;

		public void getBooleanStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException;

		public void getStringStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public java.lang.String getVersion() throws org.apache.thrift.TException {
			send_getVersion();
			return recv_getVersion();
		}

		public void send_getVersion() throws org.apache.thrift.TException {
			getVersion_args args = new getVersion_args();
			sendBase("getVersion", args);
		}

		public java.lang.String recv_getVersion() throws org.apache.thrift.TException {
			getVersion_result result = new getVersion_result();
			receiveBase(result, "getVersion");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getVersion failed: unknown result");
		}

		public java.lang.String getTypesPlatform() throws org.apache.thrift.TException {
			send_getTypesPlatform();
			return recv_getTypesPlatform();
		}

		public void send_getTypesPlatform() throws org.apache.thrift.TException {
			getTypesPlatform_args args = new getTypesPlatform_args();
			sendBase("getTypesPlatform", args);
		}

		public java.lang.String recv_getTypesPlatform() throws org.apache.thrift.TException {
			getTypesPlatform_result result = new getTypesPlatform_result();
			receiveBase(result, "getTypesPlatform");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getTypesPlatform failed: unknown result");
		}

		public Instance instanciate(java.lang.String instanceName, Type fmuType, java.lang.String fmuGUID,
				java.lang.String fmuResourceLocation, boolean visible, boolean loggingOn)
				throws org.apache.thrift.TException {
			send_instanciate(instanceName, fmuType, fmuGUID, fmuResourceLocation, visible, loggingOn);
			return recv_instanciate();
		}

		public void send_instanciate(java.lang.String instanceName, Type fmuType, java.lang.String fmuGUID,
				java.lang.String fmuResourceLocation, boolean visible, boolean loggingOn)
				throws org.apache.thrift.TException {
			instanciate_args args = new instanciate_args();
			args.setInstanceName(instanceName);
			args.setFmuType(fmuType);
			args.setFmuGUID(fmuGUID);
			args.setFmuResourceLocation(fmuResourceLocation);
			args.setVisible(visible);
			args.setLoggingOn(loggingOn);
			sendBase("instanciate", args);
		}

		public Instance recv_instanciate() throws org.apache.thrift.TException {
			instanciate_result result = new instanciate_result();
			receiveBase(result, "instanciate");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"instanciate failed: unknown result");
		}

		public Status setupExperiment(Instance c, boolean toleranceDefined, double tolerance, double startTime,
				boolean stopTimeDefined, double stopTime) throws org.apache.thrift.TException {
			send_setupExperiment(c, toleranceDefined, tolerance, startTime, stopTimeDefined, stopTime);
			return recv_setupExperiment();
		}

		public void send_setupExperiment(Instance c, boolean toleranceDefined, double tolerance, double startTime,
				boolean stopTimeDefined, double stopTime) throws org.apache.thrift.TException {
			setupExperiment_args args = new setupExperiment_args();
			args.setC(c);
			args.setToleranceDefined(toleranceDefined);
			args.setTolerance(tolerance);
			args.setStartTime(startTime);
			args.setStopTimeDefined(stopTimeDefined);
			args.setStopTime(stopTime);
			sendBase("setupExperiment", args);
		}

		public Status recv_setupExperiment() throws org.apache.thrift.TException {
			setupExperiment_result result = new setupExperiment_result();
			receiveBase(result, "setupExperiment");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setupExperiment failed: unknown result");
		}

		public Status enterInitializationMode(Instance c) throws org.apache.thrift.TException {
			send_enterInitializationMode(c);
			return recv_enterInitializationMode();
		}

		public void send_enterInitializationMode(Instance c) throws org.apache.thrift.TException {
			enterInitializationMode_args args = new enterInitializationMode_args();
			args.setC(c);
			sendBase("enterInitializationMode", args);
		}

		public Status recv_enterInitializationMode() throws org.apache.thrift.TException {
			enterInitializationMode_result result = new enterInitializationMode_result();
			receiveBase(result, "enterInitializationMode");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"enterInitializationMode failed: unknown result");
		}

		public Status exitInitializationMode(Instance c) throws org.apache.thrift.TException {
			send_exitInitializationMode(c);
			return recv_exitInitializationMode();
		}

		public void send_exitInitializationMode(Instance c) throws org.apache.thrift.TException {
			exitInitializationMode_args args = new exitInitializationMode_args();
			args.setC(c);
			sendBase("exitInitializationMode", args);
		}

		public Status recv_exitInitializationMode() throws org.apache.thrift.TException {
			exitInitializationMode_result result = new exitInitializationMode_result();
			receiveBase(result, "exitInitializationMode");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"exitInitializationMode failed: unknown result");
		}

		public Status terminate(Instance c) throws org.apache.thrift.TException {
			send_terminate(c);
			return recv_terminate();
		}

		public void send_terminate(Instance c) throws org.apache.thrift.TException {
			terminate_args args = new terminate_args();
			args.setC(c);
			sendBase("terminate", args);
		}

		public Status recv_terminate() throws org.apache.thrift.TException {
			terminate_result result = new terminate_result();
			receiveBase(result, "terminate");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"terminate failed: unknown result");
		}

		public Status reset(Instance c) throws org.apache.thrift.TException {
			send_reset(c);
			return recv_reset();
		}

		public void send_reset(Instance c) throws org.apache.thrift.TException {
			reset_args args = new reset_args();
			args.setC(c);
			sendBase("reset", args);
		}

		public Status recv_reset() throws org.apache.thrift.TException {
			reset_result result = new reset_result();
			receiveBase(result, "reset");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"reset failed: unknown result");
		}

		public void freeInstance(Instance c) throws org.apache.thrift.TException {
			send_freeInstance(c);
			recv_freeInstance();
		}

		public void send_freeInstance(Instance c) throws org.apache.thrift.TException {
			freeInstance_args args = new freeInstance_args();
			args.setC(c);
			sendBase("freeInstance", args);
		}

		public void recv_freeInstance() throws org.apache.thrift.TException {
			freeInstance_result result = new freeInstance_result();
			receiveBase(result, "freeInstance");
			return;
		}

		public java.util.List<java.lang.Double> getReal(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException {
			send_getReal(c, refs);
			return recv_getReal();
		}

		public void send_getReal(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException {
			getReal_args args = new getReal_args();
			args.setC(c);
			args.setRefs(refs);
			sendBase("getReal", args);
		}

		public java.util.List<java.lang.Double> recv_getReal() throws org.apache.thrift.TException {
			getReal_result result = new getReal_result();
			receiveBase(result, "getReal");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getReal failed: unknown result");
		}

		public java.util.List<java.lang.Integer> getInteger(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException {
			send_getInteger(c, refs);
			return recv_getInteger();
		}

		public void send_getInteger(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException {
			getInteger_args args = new getInteger_args();
			args.setC(c);
			args.setRefs(refs);
			sendBase("getInteger", args);
		}

		public java.util.List<java.lang.Integer> recv_getInteger() throws org.apache.thrift.TException {
			getInteger_result result = new getInteger_result();
			receiveBase(result, "getInteger");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getInteger failed: unknown result");
		}

		public java.util.List<java.lang.Boolean> getBoolean(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException {
			send_getBoolean(c, refs);
			return recv_getBoolean();
		}

		public void send_getBoolean(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException {
			getBoolean_args args = new getBoolean_args();
			args.setC(c);
			args.setRefs(refs);
			sendBase("getBoolean", args);
		}

		public java.util.List<java.lang.Boolean> recv_getBoolean() throws org.apache.thrift.TException {
			getBoolean_result result = new getBoolean_result();
			receiveBase(result, "getBoolean");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getBoolean failed: unknown result");
		}

		public java.util.List<java.lang.String> getString(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException {
			send_getString(c, refs);
			return recv_getString();
		}

		public void send_getString(Instance c, java.util.List<java.lang.Integer> refs)
				throws org.apache.thrift.TException {
			getString_args args = new getString_args();
			args.setC(c);
			args.setRefs(refs);
			sendBase("getString", args);
		}

		public java.util.List<java.lang.String> recv_getString() throws org.apache.thrift.TException {
			getString_result result = new getString_result();
			receiveBase(result, "getString");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getString failed: unknown result");
		}

		public Status setReal(Instance c, java.util.Map<java.lang.Integer, java.lang.Double> ref_values)
				throws org.apache.thrift.TException {
			send_setReal(c, ref_values);
			return recv_setReal();
		}

		public void send_setReal(Instance c, java.util.Map<java.lang.Integer, java.lang.Double> ref_values)
				throws org.apache.thrift.TException {
			setReal_args args = new setReal_args();
			args.setC(c);
			args.setRef_values(ref_values);
			sendBase("setReal", args);
		}

		public Status recv_setReal() throws org.apache.thrift.TException {
			setReal_result result = new setReal_result();
			receiveBase(result, "setReal");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setReal failed: unknown result");
		}

		public Status setInteger(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_values)
				throws org.apache.thrift.TException {
			send_setInteger(c, ref_values);
			return recv_setInteger();
		}

		public void send_setInteger(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_values)
				throws org.apache.thrift.TException {
			setInteger_args args = new setInteger_args();
			args.setC(c);
			args.setRef_values(ref_values);
			sendBase("setInteger", args);
		}

		public Status recv_setInteger() throws org.apache.thrift.TException {
			setInteger_result result = new setInteger_result();
			receiveBase(result, "setInteger");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setInteger failed: unknown result");
		}

		public Status setBoolean(Instance c, java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values)
				throws org.apache.thrift.TException {
			send_setBoolean(c, ref_values);
			return recv_setBoolean();
		}

		public void send_setBoolean(Instance c, java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values)
				throws org.apache.thrift.TException {
			setBoolean_args args = new setBoolean_args();
			args.setC(c);
			args.setRef_values(ref_values);
			sendBase("setBoolean", args);
		}

		public Status recv_setBoolean() throws org.apache.thrift.TException {
			setBoolean_result result = new setBoolean_result();
			receiveBase(result, "setBoolean");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setBoolean failed: unknown result");
		}

		public Status setString(Instance c, java.util.Map<java.lang.Integer, java.lang.String> ref_values)
				throws org.apache.thrift.TException {
			send_setString(c, ref_values);
			return recv_setString();
		}

		public void send_setString(Instance c, java.util.Map<java.lang.Integer, java.lang.String> ref_values)
				throws org.apache.thrift.TException {
			setString_args args = new setString_args();
			args.setC(c);
			args.setRef_values(ref_values);
			sendBase("setString", args);
		}

		public Status recv_setString() throws org.apache.thrift.TException {
			setString_result result = new setString_result();
			receiveBase(result, "setString");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setString failed: unknown result");
		}

		public Status setRealInputDerivatives(Instance c,
				java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) throws org.apache.thrift.TException {
			send_setRealInputDerivatives(c, ref_orders, ref_values);
			return recv_setRealInputDerivatives();
		}

		public void send_setRealInputDerivatives(Instance c,
				java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) throws org.apache.thrift.TException {
			setRealInputDerivatives_args args = new setRealInputDerivatives_args();
			args.setC(c);
			args.setRef_orders(ref_orders);
			args.setRef_values(ref_values);
			sendBase("setRealInputDerivatives", args);
		}

		public Status recv_setRealInputDerivatives() throws org.apache.thrift.TException {
			setRealInputDerivatives_result result = new setRealInputDerivatives_result();
			receiveBase(result, "setRealInputDerivatives");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setRealInputDerivatives failed: unknown result");
		}

		public Status setRealOutputDerivatives(Instance c,
				java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) throws org.apache.thrift.TException {
			send_setRealOutputDerivatives(c, ref_orders, ref_values);
			return recv_setRealOutputDerivatives();
		}

		public void send_setRealOutputDerivatives(Instance c,
				java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) throws org.apache.thrift.TException {
			setRealOutputDerivatives_args args = new setRealOutputDerivatives_args();
			args.setC(c);
			args.setRef_orders(ref_orders);
			args.setRef_values(ref_values);
			sendBase("setRealOutputDerivatives", args);
		}

		public Status recv_setRealOutputDerivatives() throws org.apache.thrift.TException {
			setRealOutputDerivatives_result result = new setRealOutputDerivatives_result();
			receiveBase(result, "setRealOutputDerivatives");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setRealOutputDerivatives failed: unknown result");
		}

		public Status cancelStep(Instance c) throws org.apache.thrift.TException {
			send_cancelStep(c);
			return recv_cancelStep();
		}

		public void send_cancelStep(Instance c) throws org.apache.thrift.TException {
			cancelStep_args args = new cancelStep_args();
			args.setC(c);
			sendBase("cancelStep", args);
		}

		public Status recv_cancelStep() throws org.apache.thrift.TException {
			cancelStep_result result = new cancelStep_result();
			receiveBase(result, "cancelStep");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"cancelStep failed: unknown result");
		}

		public Status doStep(Instance c, double currentCommunicationPoint, double communicationStepSize,
				boolean noSetFMUStatePriorToCurrentPoint) throws org.apache.thrift.TException {
			send_doStep(c, currentCommunicationPoint, communicationStepSize, noSetFMUStatePriorToCurrentPoint);
			return recv_doStep();
		}

		public void send_doStep(Instance c, double currentCommunicationPoint, double communicationStepSize,
				boolean noSetFMUStatePriorToCurrentPoint) throws org.apache.thrift.TException {
			doStep_args args = new doStep_args();
			args.setC(c);
			args.setCurrentCommunicationPoint(currentCommunicationPoint);
			args.setCommunicationStepSize(communicationStepSize);
			args.setNoSetFMUStatePriorToCurrentPoint(noSetFMUStatePriorToCurrentPoint);
			sendBase("doStep", args);
		}

		public Status recv_doStep() throws org.apache.thrift.TException {
			doStep_result result = new doStep_result();
			receiveBase(result, "doStep");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"doStep failed: unknown result");
		}

		public Status getStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			send_getStatus(c, s);
			return recv_getStatus();
		}

		public void send_getStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			getStatus_args args = new getStatus_args();
			args.setC(c);
			args.setS(s);
			sendBase("getStatus", args);
		}

		public Status recv_getStatus() throws org.apache.thrift.TException {
			getStatus_result result = new getStatus_result();
			receiveBase(result, "getStatus");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getStatus failed: unknown result");
		}

		public int getIntegerStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			send_getIntegerStatus(c, s);
			return recv_getIntegerStatus();
		}

		public void send_getIntegerStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			getIntegerStatus_args args = new getIntegerStatus_args();
			args.setC(c);
			args.setS(s);
			sendBase("getIntegerStatus", args);
		}

		public int recv_getIntegerStatus() throws org.apache.thrift.TException {
			getIntegerStatus_result result = new getIntegerStatus_result();
			receiveBase(result, "getIntegerStatus");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getIntegerStatus failed: unknown result");
		}

		public double getRealStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			send_getRealStatus(c, s);
			return recv_getRealStatus();
		}

		public void send_getRealStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			getRealStatus_args args = new getRealStatus_args();
			args.setC(c);
			args.setS(s);
			sendBase("getRealStatus", args);
		}

		public double recv_getRealStatus() throws org.apache.thrift.TException {
			getRealStatus_result result = new getRealStatus_result();
			receiveBase(result, "getRealStatus");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getRealStatus failed: unknown result");
		}

		public boolean getBooleanStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			send_getBooleanStatus(c, s);
			return recv_getBooleanStatus();
		}

		public void send_getBooleanStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			getBooleanStatus_args args = new getBooleanStatus_args();
			args.setC(c);
			args.setS(s);
			sendBase("getBooleanStatus", args);
		}

		public boolean recv_getBooleanStatus() throws org.apache.thrift.TException {
			getBooleanStatus_result result = new getBooleanStatus_result();
			receiveBase(result, "getBooleanStatus");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getBooleanStatus failed: unknown result");
		}

		public java.lang.String getStringStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			send_getStringStatus(c, s);
			return recv_getStringStatus();
		}

		public void send_getStringStatus(Instance c, StatusKind s) throws org.apache.thrift.TException {
			getStringStatus_args args = new getStringStatus_args();
			args.setC(c);
			args.setS(s);
			sendBase("getStringStatus", args);
		}

		public java.lang.String recv_getStringStatus() throws org.apache.thrift.TException {
			getStringStatus_result result = new getStringStatus_result();
			receiveBase(result, "getStringStatus");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getStringStatus failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getVersion(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getVersion_call method_call = new getVersion_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getVersion_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
			public getVersion_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVersion",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getVersion_args args = new getVersion_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getVersion();
			}
		}

		public void getTypesPlatform(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getTypesPlatform_call method_call = new getTypesPlatform_call(resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getTypesPlatform_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
			public getTypesPlatform_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTypesPlatform",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getTypesPlatform_args args = new getTypesPlatform_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getTypesPlatform();
			}
		}

		public void instanciate(java.lang.String instanceName, Type fmuType, java.lang.String fmuGUID,
				java.lang.String fmuResourceLocation, boolean visible, boolean loggingOn,
				org.apache.thrift.async.AsyncMethodCallback<Instance> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			instanciate_call method_call = new instanciate_call(instanceName, fmuType, fmuGUID, fmuResourceLocation,
					visible, loggingOn, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class instanciate_call extends org.apache.thrift.async.TAsyncMethodCall<Instance> {
			private java.lang.String instanceName;
			private Type fmuType;
			private java.lang.String fmuGUID;
			private java.lang.String fmuResourceLocation;
			private boolean visible;
			private boolean loggingOn;

			public instanciate_call(java.lang.String instanceName, Type fmuType, java.lang.String fmuGUID,
					java.lang.String fmuResourceLocation, boolean visible, boolean loggingOn,
					org.apache.thrift.async.AsyncMethodCallback<Instance> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.instanceName = instanceName;
				this.fmuType = fmuType;
				this.fmuGUID = fmuGUID;
				this.fmuResourceLocation = fmuResourceLocation;
				this.visible = visible;
				this.loggingOn = loggingOn;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("instanciate",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				instanciate_args args = new instanciate_args();
				args.setInstanceName(instanceName);
				args.setFmuType(fmuType);
				args.setFmuGUID(fmuGUID);
				args.setFmuResourceLocation(fmuResourceLocation);
				args.setVisible(visible);
				args.setLoggingOn(loggingOn);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Instance getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_instanciate();
			}
		}

		public void setupExperiment(Instance c, boolean toleranceDefined, double tolerance, double startTime,
				boolean stopTimeDefined, double stopTime,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setupExperiment_call method_call = new setupExperiment_call(c, toleranceDefined, tolerance, startTime,
					stopTimeDefined, stopTime, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setupExperiment_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;
			private boolean toleranceDefined;
			private double tolerance;
			private double startTime;
			private boolean stopTimeDefined;
			private double stopTime;

			public setupExperiment_call(Instance c, boolean toleranceDefined, double tolerance, double startTime,
					boolean stopTimeDefined, double stopTime,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.toleranceDefined = toleranceDefined;
				this.tolerance = tolerance;
				this.startTime = startTime;
				this.stopTimeDefined = stopTimeDefined;
				this.stopTime = stopTime;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setupExperiment",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setupExperiment_args args = new setupExperiment_args();
				args.setC(c);
				args.setToleranceDefined(toleranceDefined);
				args.setTolerance(tolerance);
				args.setStartTime(startTime);
				args.setStopTimeDefined(stopTimeDefined);
				args.setStopTime(stopTime);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setupExperiment();
			}
		}

		public void enterInitializationMode(Instance c,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			enterInitializationMode_call method_call = new enterInitializationMode_call(c, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class enterInitializationMode_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;

			public enterInitializationMode_call(Instance c,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enterInitializationMode",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				enterInitializationMode_args args = new enterInitializationMode_args();
				args.setC(c);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_enterInitializationMode();
			}
		}

		public void exitInitializationMode(Instance c,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			exitInitializationMode_call method_call = new exitInitializationMode_call(c, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class exitInitializationMode_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;

			public exitInitializationMode_call(Instance c,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exitInitializationMode",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				exitInitializationMode_args args = new exitInitializationMode_args();
				args.setC(c);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_exitInitializationMode();
			}
		}

		public void terminate(Instance c, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			terminate_call method_call = new terminate_call(c, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class terminate_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;

			public terminate_call(Instance c, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminate",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				terminate_args args = new terminate_args();
				args.setC(c);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_terminate();
			}
		}

		public void reset(Instance c, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			reset_call method_call = new reset_call(c, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class reset_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;

			public reset_call(Instance c, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reset",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				reset_args args = new reset_args();
				args.setC(c);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_reset();
			}
		}

		public void freeInstance(Instance c, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			freeInstance_call method_call = new freeInstance_call(c, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class freeInstance_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private Instance c;

			public freeInstance_call(Instance c, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("freeInstance",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				freeInstance_args args = new freeInstance_args();
				args.setC(c);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return null;
			}
		}

		public void getReal(Instance c, java.util.List<java.lang.Integer> refs,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getReal_call method_call = new getReal_call(c, refs, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getReal_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Double>> {
			private Instance c;
			private java.util.List<java.lang.Integer> refs;

			public getReal_call(Instance c, java.util.List<java.lang.Integer> refs,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.refs = refs;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReal",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getReal_args args = new getReal_args();
				args.setC(c);
				args.setRefs(refs);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<java.lang.Double> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getReal();
			}
		}

		public void getInteger(Instance c, java.util.List<java.lang.Integer> refs,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getInteger_call method_call = new getInteger_call(c, refs, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getInteger_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Integer>> {
			private Instance c;
			private java.util.List<java.lang.Integer> refs;

			public getInteger_call(Instance c, java.util.List<java.lang.Integer> refs,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.refs = refs;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInteger",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getInteger_args args = new getInteger_args();
				args.setC(c);
				args.setRefs(refs);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<java.lang.Integer> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getInteger();
			}
		}

		public void getBoolean(Instance c, java.util.List<java.lang.Integer> refs,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Boolean>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getBoolean_call method_call = new getBoolean_call(c, refs, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getBoolean_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Boolean>> {
			private Instance c;
			private java.util.List<java.lang.Integer> refs;

			public getBoolean_call(Instance c, java.util.List<java.lang.Integer> refs,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Boolean>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.refs = refs;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBoolean",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getBoolean_args args = new getBoolean_args();
				args.setC(c);
				args.setRefs(refs);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<java.lang.Boolean> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getBoolean();
			}
		}

		public void getString(Instance c, java.util.List<java.lang.Integer> refs,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getString_call method_call = new getString_call(c, refs, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getString_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
			private Instance c;
			private java.util.List<java.lang.Integer> refs;

			public getString_call(Instance c, java.util.List<java.lang.Integer> refs,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.refs = refs;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getString",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getString_args args = new getString_args();
				args.setC(c);
				args.setRefs(refs);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getString();
			}
		}

		public void setReal(Instance c, java.util.Map<java.lang.Integer, java.lang.Double> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setReal_call method_call = new setReal_call(c, ref_values, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setReal_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;
			private java.util.Map<java.lang.Integer, java.lang.Double> ref_values;

			public setReal_call(Instance c, java.util.Map<java.lang.Integer, java.lang.Double> ref_values,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.ref_values = ref_values;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setReal",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setReal_args args = new setReal_args();
				args.setC(c);
				args.setRef_values(ref_values);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setReal();
			}
		}

		public void setInteger(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setInteger_call method_call = new setInteger_call(c, ref_values, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setInteger_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;
			private java.util.Map<java.lang.Integer, java.lang.Integer> ref_values;

			public setInteger_call(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_values,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.ref_values = ref_values;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setInteger",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setInteger_args args = new setInteger_args();
				args.setC(c);
				args.setRef_values(ref_values);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setInteger();
			}
		}

		public void setBoolean(Instance c, java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setBoolean_call method_call = new setBoolean_call(c, ref_values, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setBoolean_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;
			private java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values;

			public setBoolean_call(Instance c, java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.ref_values = ref_values;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setBoolean",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setBoolean_args args = new setBoolean_args();
				args.setC(c);
				args.setRef_values(ref_values);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setBoolean();
			}
		}

		public void setString(Instance c, java.util.Map<java.lang.Integer, java.lang.String> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setString_call method_call = new setString_call(c, ref_values, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setString_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;
			private java.util.Map<java.lang.Integer, java.lang.String> ref_values;

			public setString_call(Instance c, java.util.Map<java.lang.Integer, java.lang.String> ref_values,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.ref_values = ref_values;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setString",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setString_args args = new setString_args();
				args.setC(c);
				args.setRef_values(ref_values);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setString();
			}
		}

		public void setRealInputDerivatives(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setRealInputDerivatives_call method_call = new setRealInputDerivatives_call(c, ref_orders, ref_values,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setRealInputDerivatives_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;
			private java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders;
			private java.util.Map<java.lang.Integer, java.lang.Double> ref_values;

			public setRealInputDerivatives_call(Instance c,
					java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
					java.util.Map<java.lang.Integer, java.lang.Double> ref_values,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.ref_orders = ref_orders;
				this.ref_values = ref_values;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRealInputDerivatives",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setRealInputDerivatives_args args = new setRealInputDerivatives_args();
				args.setC(c);
				args.setRef_orders(ref_orders);
				args.setRef_values(ref_values);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setRealInputDerivatives();
			}
		}

		public void setRealOutputDerivatives(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setRealOutputDerivatives_call method_call = new setRealOutputDerivatives_call(c, ref_orders, ref_values,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setRealOutputDerivatives_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;
			private java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders;
			private java.util.Map<java.lang.Integer, java.lang.Double> ref_values;

			public setRealOutputDerivatives_call(Instance c,
					java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
					java.util.Map<java.lang.Integer, java.lang.Double> ref_values,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.ref_orders = ref_orders;
				this.ref_values = ref_values;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRealOutputDerivatives",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setRealOutputDerivatives_args args = new setRealOutputDerivatives_args();
				args.setC(c);
				args.setRef_orders(ref_orders);
				args.setRef_values(ref_values);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setRealOutputDerivatives();
			}
		}

		public void cancelStep(Instance c, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			cancelStep_call method_call = new cancelStep_call(c, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class cancelStep_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;

			public cancelStep_call(Instance c, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelStep",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				cancelStep_args args = new cancelStep_args();
				args.setC(c);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_cancelStep();
			}
		}

		public void doStep(Instance c, double currentCommunicationPoint, double communicationStepSize,
				boolean noSetFMUStatePriorToCurrentPoint,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			doStep_call method_call = new doStep_call(c, currentCommunicationPoint, communicationStepSize,
					noSetFMUStatePriorToCurrentPoint, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class doStep_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;
			private double currentCommunicationPoint;
			private double communicationStepSize;
			private boolean noSetFMUStatePriorToCurrentPoint;

			public doStep_call(Instance c, double currentCommunicationPoint, double communicationStepSize,
					boolean noSetFMUStatePriorToCurrentPoint,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.currentCommunicationPoint = currentCommunicationPoint;
				this.communicationStepSize = communicationStepSize;
				this.noSetFMUStatePriorToCurrentPoint = noSetFMUStatePriorToCurrentPoint;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doStep",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				doStep_args args = new doStep_args();
				args.setC(c);
				args.setCurrentCommunicationPoint(currentCommunicationPoint);
				args.setCommunicationStepSize(communicationStepSize);
				args.setNoSetFMUStatePriorToCurrentPoint(noSetFMUStatePriorToCurrentPoint);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_doStep();
			}
		}

		public void getStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			getStatus_call method_call = new getStatus_call(c, s, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getStatus_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
			private Instance c;
			private StatusKind s;

			public getStatus_call(Instance c, StatusKind s,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.s = s;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStatus",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getStatus_args args = new getStatus_args();
				args.setC(c);
				args.setS(s);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Status getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getStatus();
			}
		}

		public void getIntegerStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getIntegerStatus_call method_call = new getIntegerStatus_call(c, s, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getIntegerStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
			private Instance c;
			private StatusKind s;

			public getIntegerStatus_call(Instance c, StatusKind s,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.s = s;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIntegerStatus",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getIntegerStatus_args args = new getIntegerStatus_args();
				args.setC(c);
				args.setS(s);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Integer getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getIntegerStatus();
			}
		}

		public void getRealStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getRealStatus_call method_call = new getRealStatus_call(c, s, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getRealStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
			private Instance c;
			private StatusKind s;

			public getRealStatus_call(Instance c, StatusKind s,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.s = s;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRealStatus",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getRealStatus_args args = new getRealStatus_args();
				args.setC(c);
				args.setS(s);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Double getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getRealStatus();
			}
		}

		public void getBooleanStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getBooleanStatus_call method_call = new getBooleanStatus_call(c, s, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getBooleanStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
			private Instance c;
			private StatusKind s;

			public getBooleanStatus_call(Instance c, StatusKind s,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.s = s;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBooleanStatus",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getBooleanStatus_args args = new getBooleanStatus_args();
				args.setC(c);
				args.setS(s);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getBooleanStatus();
			}
		}

		public void getStringStatus(Instance c, StatusKind s,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getStringStatus_call method_call = new getStringStatus_call(c, s, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getStringStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
			private Instance c;
			private StatusKind s;

			public getStringStatus_call(Instance c, StatusKind s,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.c = c;
				this.s = s;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStringStatus",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getStringStatus_args args = new getStringStatus_args();
				args.setC(c);
				args.setS(s);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getStringStatus();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getVersion", new getVersion());
			processMap.put("getTypesPlatform", new getTypesPlatform());
			processMap.put("instanciate", new instanciate());
			processMap.put("setupExperiment", new setupExperiment());
			processMap.put("enterInitializationMode", new enterInitializationMode());
			processMap.put("exitInitializationMode", new exitInitializationMode());
			processMap.put("terminate", new terminate());
			processMap.put("reset", new reset());
			processMap.put("freeInstance", new freeInstance());
			processMap.put("getReal", new getReal());
			processMap.put("getInteger", new getInteger());
			processMap.put("getBoolean", new getBoolean());
			processMap.put("getString", new getString());
			processMap.put("setReal", new setReal());
			processMap.put("setInteger", new setInteger());
			processMap.put("setBoolean", new setBoolean());
			processMap.put("setString", new setString());
			processMap.put("setRealInputDerivatives", new setRealInputDerivatives());
			processMap.put("setRealOutputDerivatives", new setRealOutputDerivatives());
			processMap.put("cancelStep", new cancelStep());
			processMap.put("doStep", new doStep());
			processMap.put("getStatus", new getStatus());
			processMap.put("getIntegerStatus", new getIntegerStatus());
			processMap.put("getRealStatus", new getRealStatus());
			processMap.put("getBooleanStatus", new getBooleanStatus());
			processMap.put("getStringStatus", new getStringStatus());
			return processMap;
		}

		public static class getVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVersion_args> {
			public getVersion() {
				super("getVersion");
			}

			public getVersion_args getEmptyArgsInstance() {
				return new getVersion_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getVersion_result getResult(I iface, getVersion_args args) throws org.apache.thrift.TException {
				getVersion_result result = new getVersion_result();
				result.success = iface.getVersion();
				return result;
			}
		}

		public static class getTypesPlatform<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getTypesPlatform_args> {
			public getTypesPlatform() {
				super("getTypesPlatform");
			}

			public getTypesPlatform_args getEmptyArgsInstance() {
				return new getTypesPlatform_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getTypesPlatform_result getResult(I iface, getTypesPlatform_args args)
					throws org.apache.thrift.TException {
				getTypesPlatform_result result = new getTypesPlatform_result();
				result.success = iface.getTypesPlatform();
				return result;
			}
		}

		public static class instanciate<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, instanciate_args> {
			public instanciate() {
				super("instanciate");
			}

			public instanciate_args getEmptyArgsInstance() {
				return new instanciate_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public instanciate_result getResult(I iface, instanciate_args args) throws org.apache.thrift.TException {
				instanciate_result result = new instanciate_result();
				result.success = iface.instanciate(args.instanceName, args.fmuType, args.fmuGUID,
						args.fmuResourceLocation, args.visible, args.loggingOn);
				return result;
			}
		}

		public static class setupExperiment<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setupExperiment_args> {
			public setupExperiment() {
				super("setupExperiment");
			}

			public setupExperiment_args getEmptyArgsInstance() {
				return new setupExperiment_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setupExperiment_result getResult(I iface, setupExperiment_args args)
					throws org.apache.thrift.TException {
				setupExperiment_result result = new setupExperiment_result();
				result.success = iface.setupExperiment(args.c, args.toleranceDefined, args.tolerance, args.startTime,
						args.stopTimeDefined, args.stopTime);
				return result;
			}
		}

		public static class enterInitializationMode<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, enterInitializationMode_args> {
			public enterInitializationMode() {
				super("enterInitializationMode");
			}

			public enterInitializationMode_args getEmptyArgsInstance() {
				return new enterInitializationMode_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public enterInitializationMode_result getResult(I iface, enterInitializationMode_args args)
					throws org.apache.thrift.TException {
				enterInitializationMode_result result = new enterInitializationMode_result();
				result.success = iface.enterInitializationMode(args.c);
				return result;
			}
		}

		public static class exitInitializationMode<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, exitInitializationMode_args> {
			public exitInitializationMode() {
				super("exitInitializationMode");
			}

			public exitInitializationMode_args getEmptyArgsInstance() {
				return new exitInitializationMode_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public exitInitializationMode_result getResult(I iface, exitInitializationMode_args args)
					throws org.apache.thrift.TException {
				exitInitializationMode_result result = new exitInitializationMode_result();
				result.success = iface.exitInitializationMode(args.c);
				return result;
			}
		}

		public static class terminate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminate_args> {
			public terminate() {
				super("terminate");
			}

			public terminate_args getEmptyArgsInstance() {
				return new terminate_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public terminate_result getResult(I iface, terminate_args args) throws org.apache.thrift.TException {
				terminate_result result = new terminate_result();
				result.success = iface.terminate(args.c);
				return result;
			}
		}

		public static class reset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reset_args> {
			public reset() {
				super("reset");
			}

			public reset_args getEmptyArgsInstance() {
				return new reset_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public reset_result getResult(I iface, reset_args args) throws org.apache.thrift.TException {
				reset_result result = new reset_result();
				result.success = iface.reset(args.c);
				return result;
			}
		}

		public static class freeInstance<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, freeInstance_args> {
			public freeInstance() {
				super("freeInstance");
			}

			public freeInstance_args getEmptyArgsInstance() {
				return new freeInstance_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public freeInstance_result getResult(I iface, freeInstance_args args) throws org.apache.thrift.TException {
				freeInstance_result result = new freeInstance_result();
				iface.freeInstance(args.c);
				return result;
			}
		}

		public static class getReal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReal_args> {
			public getReal() {
				super("getReal");
			}

			public getReal_args getEmptyArgsInstance() {
				return new getReal_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getReal_result getResult(I iface, getReal_args args) throws org.apache.thrift.TException {
				getReal_result result = new getReal_result();
				result.success = iface.getReal(args.c, args.refs);
				return result;
			}
		}

		public static class getInteger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInteger_args> {
			public getInteger() {
				super("getInteger");
			}

			public getInteger_args getEmptyArgsInstance() {
				return new getInteger_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getInteger_result getResult(I iface, getInteger_args args) throws org.apache.thrift.TException {
				getInteger_result result = new getInteger_result();
				result.success = iface.getInteger(args.c, args.refs);
				return result;
			}
		}

		public static class getBoolean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBoolean_args> {
			public getBoolean() {
				super("getBoolean");
			}

			public getBoolean_args getEmptyArgsInstance() {
				return new getBoolean_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getBoolean_result getResult(I iface, getBoolean_args args) throws org.apache.thrift.TException {
				getBoolean_result result = new getBoolean_result();
				result.success = iface.getBoolean(args.c, args.refs);
				return result;
			}
		}

		public static class getString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getString_args> {
			public getString() {
				super("getString");
			}

			public getString_args getEmptyArgsInstance() {
				return new getString_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getString_result getResult(I iface, getString_args args) throws org.apache.thrift.TException {
				getString_result result = new getString_result();
				result.success = iface.getString(args.c, args.refs);
				return result;
			}
		}

		public static class setReal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setReal_args> {
			public setReal() {
				super("setReal");
			}

			public setReal_args getEmptyArgsInstance() {
				return new setReal_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setReal_result getResult(I iface, setReal_args args) throws org.apache.thrift.TException {
				setReal_result result = new setReal_result();
				result.success = iface.setReal(args.c, args.ref_values);
				return result;
			}
		}

		public static class setInteger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setInteger_args> {
			public setInteger() {
				super("setInteger");
			}

			public setInteger_args getEmptyArgsInstance() {
				return new setInteger_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setInteger_result getResult(I iface, setInteger_args args) throws org.apache.thrift.TException {
				setInteger_result result = new setInteger_result();
				result.success = iface.setInteger(args.c, args.ref_values);
				return result;
			}
		}

		public static class setBoolean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setBoolean_args> {
			public setBoolean() {
				super("setBoolean");
			}

			public setBoolean_args getEmptyArgsInstance() {
				return new setBoolean_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setBoolean_result getResult(I iface, setBoolean_args args) throws org.apache.thrift.TException {
				setBoolean_result result = new setBoolean_result();
				result.success = iface.setBoolean(args.c, args.ref_values);
				return result;
			}
		}

		public static class setString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setString_args> {
			public setString() {
				super("setString");
			}

			public setString_args getEmptyArgsInstance() {
				return new setString_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setString_result getResult(I iface, setString_args args) throws org.apache.thrift.TException {
				setString_result result = new setString_result();
				result.success = iface.setString(args.c, args.ref_values);
				return result;
			}
		}

		public static class setRealInputDerivatives<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setRealInputDerivatives_args> {
			public setRealInputDerivatives() {
				super("setRealInputDerivatives");
			}

			public setRealInputDerivatives_args getEmptyArgsInstance() {
				return new setRealInputDerivatives_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setRealInputDerivatives_result getResult(I iface, setRealInputDerivatives_args args)
					throws org.apache.thrift.TException {
				setRealInputDerivatives_result result = new setRealInputDerivatives_result();
				result.success = iface.setRealInputDerivatives(args.c, args.ref_orders, args.ref_values);
				return result;
			}
		}

		public static class setRealOutputDerivatives<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setRealOutputDerivatives_args> {
			public setRealOutputDerivatives() {
				super("setRealOutputDerivatives");
			}

			public setRealOutputDerivatives_args getEmptyArgsInstance() {
				return new setRealOutputDerivatives_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setRealOutputDerivatives_result getResult(I iface, setRealOutputDerivatives_args args)
					throws org.apache.thrift.TException {
				setRealOutputDerivatives_result result = new setRealOutputDerivatives_result();
				result.success = iface.setRealOutputDerivatives(args.c, args.ref_orders, args.ref_values);
				return result;
			}
		}

		public static class cancelStep<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelStep_args> {
			public cancelStep() {
				super("cancelStep");
			}

			public cancelStep_args getEmptyArgsInstance() {
				return new cancelStep_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public cancelStep_result getResult(I iface, cancelStep_args args) throws org.apache.thrift.TException {
				cancelStep_result result = new cancelStep_result();
				result.success = iface.cancelStep(args.c);
				return result;
			}
		}

		public static class doStep<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doStep_args> {
			public doStep() {
				super("doStep");
			}

			public doStep_args getEmptyArgsInstance() {
				return new doStep_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public doStep_result getResult(I iface, doStep_args args) throws org.apache.thrift.TException {
				doStep_result result = new doStep_result();
				result.success = iface.doStep(args.c, args.currentCommunicationPoint, args.communicationStepSize,
						args.noSetFMUStatePriorToCurrentPoint);
				return result;
			}
		}

		public static class getStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStatus_args> {
			public getStatus() {
				super("getStatus");
			}

			public getStatus_args getEmptyArgsInstance() {
				return new getStatus_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getStatus_result getResult(I iface, getStatus_args args) throws org.apache.thrift.TException {
				getStatus_result result = new getStatus_result();
				result.success = iface.getStatus(args.c, args.s);
				return result;
			}
		}

		public static class getIntegerStatus<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getIntegerStatus_args> {
			public getIntegerStatus() {
				super("getIntegerStatus");
			}

			public getIntegerStatus_args getEmptyArgsInstance() {
				return new getIntegerStatus_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getIntegerStatus_result getResult(I iface, getIntegerStatus_args args)
					throws org.apache.thrift.TException {
				getIntegerStatus_result result = new getIntegerStatus_result();
				result.success = iface.getIntegerStatus(args.c, args.s);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class getRealStatus<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getRealStatus_args> {
			public getRealStatus() {
				super("getRealStatus");
			}

			public getRealStatus_args getEmptyArgsInstance() {
				return new getRealStatus_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getRealStatus_result getResult(I iface, getRealStatus_args args)
					throws org.apache.thrift.TException {
				getRealStatus_result result = new getRealStatus_result();
				result.success = iface.getRealStatus(args.c, args.s);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class getBooleanStatus<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getBooleanStatus_args> {
			public getBooleanStatus() {
				super("getBooleanStatus");
			}

			public getBooleanStatus_args getEmptyArgsInstance() {
				return new getBooleanStatus_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getBooleanStatus_result getResult(I iface, getBooleanStatus_args args)
					throws org.apache.thrift.TException {
				getBooleanStatus_result result = new getBooleanStatus_result();
				result.success = iface.getBooleanStatus(args.c, args.s);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class getStringStatus<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getStringStatus_args> {
			public getStringStatus() {
				super("getStringStatus");
			}

			public getStringStatus_args getEmptyArgsInstance() {
				return new getStringStatus_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getStringStatus_result getResult(I iface, getStringStatus_args args)
					throws org.apache.thrift.TException {
				getStringStatus_result result = new getStringStatus_result();
				result.success = iface.getStringStatus(args.c, args.s);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getVersion", new getVersion());
			processMap.put("getTypesPlatform", new getTypesPlatform());
			processMap.put("instanciate", new instanciate());
			processMap.put("setupExperiment", new setupExperiment());
			processMap.put("enterInitializationMode", new enterInitializationMode());
			processMap.put("exitInitializationMode", new exitInitializationMode());
			processMap.put("terminate", new terminate());
			processMap.put("reset", new reset());
			processMap.put("freeInstance", new freeInstance());
			processMap.put("getReal", new getReal());
			processMap.put("getInteger", new getInteger());
			processMap.put("getBoolean", new getBoolean());
			processMap.put("getString", new getString());
			processMap.put("setReal", new setReal());
			processMap.put("setInteger", new setInteger());
			processMap.put("setBoolean", new setBoolean());
			processMap.put("setString", new setString());
			processMap.put("setRealInputDerivatives", new setRealInputDerivatives());
			processMap.put("setRealOutputDerivatives", new setRealOutputDerivatives());
			processMap.put("cancelStep", new cancelStep());
			processMap.put("doStep", new doStep());
			processMap.put("getStatus", new getStatus());
			processMap.put("getIntegerStatus", new getIntegerStatus());
			processMap.put("getRealStatus", new getRealStatus());
			processMap.put("getBooleanStatus", new getBooleanStatus());
			processMap.put("getStringStatus", new getStringStatus());
			return processMap;
		}

		public static class getVersion<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getVersion_args, java.lang.String> {
			public getVersion() {
				super("getVersion");
			}

			public getVersion_args getEmptyArgsInstance() {
				return new getVersion_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
					public void onComplete(java.lang.String o) {
						getVersion_result result = new getVersion_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getVersion_result result = new getVersion_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getVersion_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
					throws org.apache.thrift.TException {
				iface.getVersion(resultHandler);
			}
		}

		public static class getTypesPlatform<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getTypesPlatform_args, java.lang.String> {
			public getTypesPlatform() {
				super("getTypesPlatform");
			}

			public getTypesPlatform_args getEmptyArgsInstance() {
				return new getTypesPlatform_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
					public void onComplete(java.lang.String o) {
						getTypesPlatform_result result = new getTypesPlatform_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getTypesPlatform_result result = new getTypesPlatform_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getTypesPlatform_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
					throws org.apache.thrift.TException {
				iface.getTypesPlatform(resultHandler);
			}
		}

		public static class instanciate<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, instanciate_args, Instance> {
			public instanciate() {
				super("instanciate");
			}

			public instanciate_args getEmptyArgsInstance() {
				return new instanciate_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Instance> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Instance>() {
					public void onComplete(Instance o) {
						instanciate_result result = new instanciate_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						instanciate_result result = new instanciate_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, instanciate_args args,
					org.apache.thrift.async.AsyncMethodCallback<Instance> resultHandler)
					throws org.apache.thrift.TException {
				iface.instanciate(args.instanceName, args.fmuType, args.fmuGUID, args.fmuResourceLocation, args.visible,
						args.loggingOn, resultHandler);
			}
		}

		public static class setupExperiment<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setupExperiment_args, Status> {
			public setupExperiment() {
				super("setupExperiment");
			}

			public setupExperiment_args getEmptyArgsInstance() {
				return new setupExperiment_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						setupExperiment_result result = new setupExperiment_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setupExperiment_result result = new setupExperiment_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setupExperiment_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.setupExperiment(args.c, args.toleranceDefined, args.tolerance, args.startTime,
						args.stopTimeDefined, args.stopTime, resultHandler);
			}
		}

		public static class enterInitializationMode<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, enterInitializationMode_args, Status> {
			public enterInitializationMode() {
				super("enterInitializationMode");
			}

			public enterInitializationMode_args getEmptyArgsInstance() {
				return new enterInitializationMode_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						enterInitializationMode_result result = new enterInitializationMode_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						enterInitializationMode_result result = new enterInitializationMode_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, enterInitializationMode_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.enterInitializationMode(args.c, resultHandler);
			}
		}

		public static class exitInitializationMode<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, exitInitializationMode_args, Status> {
			public exitInitializationMode() {
				super("exitInitializationMode");
			}

			public exitInitializationMode_args getEmptyArgsInstance() {
				return new exitInitializationMode_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						exitInitializationMode_result result = new exitInitializationMode_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						exitInitializationMode_result result = new exitInitializationMode_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, exitInitializationMode_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.exitInitializationMode(args.c, resultHandler);
			}
		}

		public static class terminate<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, terminate_args, Status> {
			public terminate() {
				super("terminate");
			}

			public terminate_args getEmptyArgsInstance() {
				return new terminate_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						terminate_result result = new terminate_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						terminate_result result = new terminate_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, terminate_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.terminate(args.c, resultHandler);
			}
		}

		public static class reset<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, reset_args, Status> {
			public reset() {
				super("reset");
			}

			public reset_args getEmptyArgsInstance() {
				return new reset_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						reset_result result = new reset_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						reset_result result = new reset_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, reset_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.reset(args.c, resultHandler);
			}
		}

		public static class freeInstance<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, freeInstance_args, Void> {
			public freeInstance() {
				super("freeInstance");
			}

			public freeInstance_args getEmptyArgsInstance() {
				return new freeInstance_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						freeInstance_result result = new freeInstance_result();
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						freeInstance_result result = new freeInstance_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, freeInstance_args args,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
					throws org.apache.thrift.TException {
				iface.freeInstance(args.c, resultHandler);
			}
		}

		public static class getReal<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getReal_args, java.util.List<java.lang.Double>> {
			public getReal() {
				super("getReal");
			}

			public getReal_args getEmptyArgsInstance() {
				return new getReal_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>>() {
					public void onComplete(java.util.List<java.lang.Double> o) {
						getReal_result result = new getReal_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getReal_result result = new getReal_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getReal_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getReal(args.c, args.refs, resultHandler);
			}
		}

		public static class getInteger<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getInteger_args, java.util.List<java.lang.Integer>> {
			public getInteger() {
				super("getInteger");
			}

			public getInteger_args getEmptyArgsInstance() {
				return new getInteger_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>>() {
					public void onComplete(java.util.List<java.lang.Integer> o) {
						getInteger_result result = new getInteger_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getInteger_result result = new getInteger_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getInteger_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getInteger(args.c, args.refs, resultHandler);
			}
		}

		public static class getBoolean<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getBoolean_args, java.util.List<java.lang.Boolean>> {
			public getBoolean() {
				super("getBoolean");
			}

			public getBoolean_args getEmptyArgsInstance() {
				return new getBoolean_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Boolean>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Boolean>>() {
					public void onComplete(java.util.List<java.lang.Boolean> o) {
						getBoolean_result result = new getBoolean_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getBoolean_result result = new getBoolean_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getBoolean_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Boolean>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getBoolean(args.c, args.refs, resultHandler);
			}
		}

		public static class getString<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getString_args, java.util.List<java.lang.String>> {
			public getString() {
				super("getString");
			}

			public getString_args getEmptyArgsInstance() {
				return new getString_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() {
					public void onComplete(java.util.List<java.lang.String> o) {
						getString_result result = new getString_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getString_result result = new getString_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getString_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getString(args.c, args.refs, resultHandler);
			}
		}

		public static class setReal<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setReal_args, Status> {
			public setReal() {
				super("setReal");
			}

			public setReal_args getEmptyArgsInstance() {
				return new setReal_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						setReal_result result = new setReal_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setReal_result result = new setReal_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setReal_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.setReal(args.c, args.ref_values, resultHandler);
			}
		}

		public static class setInteger<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setInteger_args, Status> {
			public setInteger() {
				super("setInteger");
			}

			public setInteger_args getEmptyArgsInstance() {
				return new setInteger_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						setInteger_result result = new setInteger_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setInteger_result result = new setInteger_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setInteger_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.setInteger(args.c, args.ref_values, resultHandler);
			}
		}

		public static class setBoolean<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setBoolean_args, Status> {
			public setBoolean() {
				super("setBoolean");
			}

			public setBoolean_args getEmptyArgsInstance() {
				return new setBoolean_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						setBoolean_result result = new setBoolean_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setBoolean_result result = new setBoolean_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setBoolean_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.setBoolean(args.c, args.ref_values, resultHandler);
			}
		}

		public static class setString<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setString_args, Status> {
			public setString() {
				super("setString");
			}

			public setString_args getEmptyArgsInstance() {
				return new setString_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						setString_result result = new setString_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setString_result result = new setString_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setString_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.setString(args.c, args.ref_values, resultHandler);
			}
		}

		public static class setRealInputDerivatives<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setRealInputDerivatives_args, Status> {
			public setRealInputDerivatives() {
				super("setRealInputDerivatives");
			}

			public setRealInputDerivatives_args getEmptyArgsInstance() {
				return new setRealInputDerivatives_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						setRealInputDerivatives_result result = new setRealInputDerivatives_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setRealInputDerivatives_result result = new setRealInputDerivatives_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setRealInputDerivatives_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.setRealInputDerivatives(args.c, args.ref_orders, args.ref_values, resultHandler);
			}
		}

		public static class setRealOutputDerivatives<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setRealOutputDerivatives_args, Status> {
			public setRealOutputDerivatives() {
				super("setRealOutputDerivatives");
			}

			public setRealOutputDerivatives_args getEmptyArgsInstance() {
				return new setRealOutputDerivatives_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						setRealOutputDerivatives_result result = new setRealOutputDerivatives_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setRealOutputDerivatives_result result = new setRealOutputDerivatives_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setRealOutputDerivatives_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.setRealOutputDerivatives(args.c, args.ref_orders, args.ref_values, resultHandler);
			}
		}

		public static class cancelStep<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, cancelStep_args, Status> {
			public cancelStep() {
				super("cancelStep");
			}

			public cancelStep_args getEmptyArgsInstance() {
				return new cancelStep_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						cancelStep_result result = new cancelStep_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						cancelStep_result result = new cancelStep_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, cancelStep_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.cancelStep(args.c, resultHandler);
			}
		}

		public static class doStep<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, doStep_args, Status> {
			public doStep() {
				super("doStep");
			}

			public doStep_args getEmptyArgsInstance() {
				return new doStep_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						doStep_result result = new doStep_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						doStep_result result = new doStep_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, doStep_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.doStep(args.c, args.currentCommunicationPoint, args.communicationStepSize,
						args.noSetFMUStatePriorToCurrentPoint, resultHandler);
			}
		}

		public static class getStatus<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getStatus_args, Status> {
			public getStatus() {
				super("getStatus");
			}

			public getStatus_args getEmptyArgsInstance() {
				return new getStatus_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Status>() {
					public void onComplete(Status o) {
						getStatus_result result = new getStatus_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getStatus_result result = new getStatus_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getStatus_args args,
					org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler)
					throws org.apache.thrift.TException {
				iface.getStatus(args.c, args.s, resultHandler);
			}
		}

		public static class getIntegerStatus<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getIntegerStatus_args, java.lang.Integer> {
			public getIntegerStatus() {
				super("getIntegerStatus");
			}

			public getIntegerStatus_args getEmptyArgsInstance() {
				return new getIntegerStatus_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
					public void onComplete(java.lang.Integer o) {
						getIntegerStatus_result result = new getIntegerStatus_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getIntegerStatus_result result = new getIntegerStatus_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getIntegerStatus_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
					throws org.apache.thrift.TException {
				iface.getIntegerStatus(args.c, args.s, resultHandler);
			}
		}

		public static class getRealStatus<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getRealStatus_args, java.lang.Double> {
			public getRealStatus() {
				super("getRealStatus");
			}

			public getRealStatus_args getEmptyArgsInstance() {
				return new getRealStatus_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() {
					public void onComplete(java.lang.Double o) {
						getRealStatus_result result = new getRealStatus_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getRealStatus_result result = new getRealStatus_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getRealStatus_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler)
					throws org.apache.thrift.TException {
				iface.getRealStatus(args.c, args.s, resultHandler);
			}
		}

		public static class getBooleanStatus<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getBooleanStatus_args, java.lang.Boolean> {
			public getBooleanStatus() {
				super("getBooleanStatus");
			}

			public getBooleanStatus_args getEmptyArgsInstance() {
				return new getBooleanStatus_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
					public void onComplete(java.lang.Boolean o) {
						getBooleanStatus_result result = new getBooleanStatus_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getBooleanStatus_result result = new getBooleanStatus_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getBooleanStatus_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
					throws org.apache.thrift.TException {
				iface.getBooleanStatus(args.c, args.s, resultHandler);
			}
		}

		public static class getStringStatus<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getStringStatus_args, java.lang.String> {
			public getStringStatus() {
				super("getStringStatus");
			}

			public getStringStatus_args getEmptyArgsInstance() {
				return new getStringStatus_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
					public void onComplete(java.lang.String o) {
						getStringStatus_result result = new getStringStatus_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getStringStatus_result result = new getStringStatus_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getStringStatus_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
					throws org.apache.thrift.TException {
				iface.getStringStatus(args.c, args.s, resultHandler);
			}
		}

	}

	public static class getVersion_args implements org.apache.thrift.TBase<getVersion_args, getVersion_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getVersion_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getVersion_args");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getVersion_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getVersion_argsTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVersion_args.class, metaDataMap);
		}

		public getVersion_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getVersion_args(getVersion_args other) {
		}

		public getVersion_args deepCopy() {
			return new getVersion_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getVersion_args)
				return this.equals((getVersion_args) that);
			return false;
		}

		public boolean equals(getVersion_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(getVersion_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getVersion_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getVersion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getVersion_argsStandardScheme getScheme() {
				return new getVersion_argsStandardScheme();
			}
		}

		private static class getVersion_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getVersion_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getVersion_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getVersion_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getVersion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getVersion_argsTupleScheme getScheme() {
				return new getVersion_argsTupleScheme();
			}
		}

		private static class getVersion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getVersion_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getVersion_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getVersion_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getVersion_result
			implements org.apache.thrift.TBase<getVersion_result, getVersion_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getVersion_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getVersion_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getVersion_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getVersion_resultTupleSchemeFactory();

		public java.lang.String success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVersion_result.class, metaDataMap);
		}

		public getVersion_result() {
		}

		public getVersion_result(java.lang.String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getVersion_result(getVersion_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public getVersion_result deepCopy() {
			return new getVersion_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public java.lang.String getSuccess() {
			return this.success;
		}

		public getVersion_result setSuccess(java.lang.String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getVersion_result)
				return this.equals((getVersion_result) that);
			return false;
		}

		public boolean equals(getVersion_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getVersion_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getVersion_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getVersion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getVersion_resultStandardScheme getScheme() {
				return new getVersion_resultStandardScheme();
			}
		}

		private static class getVersion_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getVersion_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getVersion_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getVersion_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getVersion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getVersion_resultTupleScheme getScheme() {
				return new getVersion_resultTupleScheme();
			}
		}

		private static class getVersion_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getVersion_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getVersion_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getVersion_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getTypesPlatform_args
			implements org.apache.thrift.TBase<getTypesPlatform_args, getTypesPlatform_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getTypesPlatform_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTypesPlatform_args");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTypesPlatform_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTypesPlatform_argsTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTypesPlatform_args.class, metaDataMap);
		}

		public getTypesPlatform_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTypesPlatform_args(getTypesPlatform_args other) {
		}

		public getTypesPlatform_args deepCopy() {
			return new getTypesPlatform_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTypesPlatform_args)
				return this.equals((getTypesPlatform_args) that);
			return false;
		}

		public boolean equals(getTypesPlatform_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(getTypesPlatform_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTypesPlatform_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTypesPlatform_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getTypesPlatform_argsStandardScheme getScheme() {
				return new getTypesPlatform_argsStandardScheme();
			}
		}

		private static class getTypesPlatform_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTypesPlatform_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTypesPlatform_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTypesPlatform_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTypesPlatform_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTypesPlatform_argsTupleScheme getScheme() {
				return new getTypesPlatform_argsTupleScheme();
			}
		}

		private static class getTypesPlatform_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getTypesPlatform_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTypesPlatform_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTypesPlatform_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getTypesPlatform_result
			implements org.apache.thrift.TBase<getTypesPlatform_result, getTypesPlatform_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getTypesPlatform_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTypesPlatform_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTypesPlatform_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTypesPlatform_resultTupleSchemeFactory();

		public java.lang.String success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTypesPlatform_result.class, metaDataMap);
		}

		public getTypesPlatform_result() {
		}

		public getTypesPlatform_result(java.lang.String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTypesPlatform_result(getTypesPlatform_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public getTypesPlatform_result deepCopy() {
			return new getTypesPlatform_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public java.lang.String getSuccess() {
			return this.success;
		}

		public getTypesPlatform_result setSuccess(java.lang.String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTypesPlatform_result)
				return this.equals((getTypesPlatform_result) that);
			return false;
		}

		public boolean equals(getTypesPlatform_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getTypesPlatform_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTypesPlatform_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTypesPlatform_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getTypesPlatform_resultStandardScheme getScheme() {
				return new getTypesPlatform_resultStandardScheme();
			}
		}

		private static class getTypesPlatform_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTypesPlatform_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTypesPlatform_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTypesPlatform_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTypesPlatform_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getTypesPlatform_resultTupleScheme getScheme() {
				return new getTypesPlatform_resultTupleScheme();
			}
		}

		private static class getTypesPlatform_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getTypesPlatform_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTypesPlatform_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTypesPlatform_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class instanciate_args implements org.apache.thrift.TBase<instanciate_args, instanciate_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<instanciate_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"instanciate_args");

		private static final org.apache.thrift.protocol.TField INSTANCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"instanceName", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField FMU_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"fmuType", org.apache.thrift.protocol.TType.I32, (short) 2);
		private static final org.apache.thrift.protocol.TField FMU_GUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"fmuGUID", org.apache.thrift.protocol.TType.STRING, (short) 3);
		private static final org.apache.thrift.protocol.TField FMU_RESOURCE_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"fmuResourceLocation", org.apache.thrift.protocol.TType.STRING, (short) 4);
		private static final org.apache.thrift.protocol.TField VISIBLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"visible", org.apache.thrift.protocol.TType.BOOL, (short) 5);
		private static final org.apache.thrift.protocol.TField LOGGING_ON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"loggingOn", org.apache.thrift.protocol.TType.BOOL, (short) 6);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new instanciate_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new instanciate_argsTupleSchemeFactory();

		public java.lang.String instanceName; // required
		/**
		 * 
		 * @see Type
		 */
		public Type fmuType; // required
		public java.lang.String fmuGUID; // required
		public java.lang.String fmuResourceLocation; // required
		public boolean visible; // required
		public boolean loggingOn; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			INSTANCE_NAME((short) 1, "instanceName"),
			/**
			 * 
			 * @see Type
			 */
			FMU_TYPE((short) 2, "fmuType"), FMU_GUID((short) 3, "fmuGUID"),
			FMU_RESOURCE_LOCATION((short) 4, "fmuResourceLocation"), VISIBLE((short) 5, "visible"),
			LOGGING_ON((short) 6, "loggingOn");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // INSTANCE_NAME
					return INSTANCE_NAME;
				case 2: // FMU_TYPE
					return FMU_TYPE;
				case 3: // FMU_GUID
					return FMU_GUID;
				case 4: // FMU_RESOURCE_LOCATION
					return FMU_RESOURCE_LOCATION;
				case 5: // VISIBLE
					return VISIBLE;
				case 6: // LOGGING_ON
					return LOGGING_ON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __VISIBLE_ISSET_ID = 0;
		private static final int __LOGGINGON_ISSET_ID = 1;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.INSTANCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("instanceName",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.FMU_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fmuType",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Type.class)));
			tmpMap.put(_Fields.FMU_GUID, new org.apache.thrift.meta_data.FieldMetaData("fmuGUID",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.FMU_RESOURCE_LOCATION, new org.apache.thrift.meta_data.FieldMetaData(
					"fmuResourceLocation", org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VISIBLE,
					new org.apache.thrift.meta_data.FieldMetaData("visible",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.LOGGING_ON,
					new org.apache.thrift.meta_data.FieldMetaData("loggingOn",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanciate_args.class, metaDataMap);
		}

		public instanciate_args() {
		}

		public instanciate_args(java.lang.String instanceName, Type fmuType, java.lang.String fmuGUID,
				java.lang.String fmuResourceLocation, boolean visible, boolean loggingOn) {
			this();
			this.instanceName = instanceName;
			this.fmuType = fmuType;
			this.fmuGUID = fmuGUID;
			this.fmuResourceLocation = fmuResourceLocation;
			this.visible = visible;
			setVisibleIsSet(true);
			this.loggingOn = loggingOn;
			setLoggingOnIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public instanciate_args(instanciate_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetInstanceName()) {
				this.instanceName = other.instanceName;
			}
			if (other.isSetFmuType()) {
				this.fmuType = other.fmuType;
			}
			if (other.isSetFmuGUID()) {
				this.fmuGUID = other.fmuGUID;
			}
			if (other.isSetFmuResourceLocation()) {
				this.fmuResourceLocation = other.fmuResourceLocation;
			}
			this.visible = other.visible;
			this.loggingOn = other.loggingOn;
		}

		public instanciate_args deepCopy() {
			return new instanciate_args(this);
		}

		@Override
		public void clear() {
			this.instanceName = null;
			this.fmuType = null;
			this.fmuGUID = null;
			this.fmuResourceLocation = null;
			setVisibleIsSet(false);
			this.visible = false;
			setLoggingOnIsSet(false);
			this.loggingOn = false;
		}

		public java.lang.String getInstanceName() {
			return this.instanceName;
		}

		public instanciate_args setInstanceName(java.lang.String instanceName) {
			this.instanceName = instanceName;
			return this;
		}

		public void unsetInstanceName() {
			this.instanceName = null;
		}

		/**
		 * Returns true if field instanceName is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetInstanceName() {
			return this.instanceName != null;
		}

		public void setInstanceNameIsSet(boolean value) {
			if (!value) {
				this.instanceName = null;
			}
		}

		/**
		 * 
		 * @see Type
		 */
		public Type getFmuType() {
			return this.fmuType;
		}

		/**
		 * 
		 * @see Type
		 */
		public instanciate_args setFmuType(Type fmuType) {
			this.fmuType = fmuType;
			return this;
		}

		public void unsetFmuType() {
			this.fmuType = null;
		}

		/**
		 * Returns true if field fmuType is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetFmuType() {
			return this.fmuType != null;
		}

		public void setFmuTypeIsSet(boolean value) {
			if (!value) {
				this.fmuType = null;
			}
		}

		public java.lang.String getFmuGUID() {
			return this.fmuGUID;
		}

		public instanciate_args setFmuGUID(java.lang.String fmuGUID) {
			this.fmuGUID = fmuGUID;
			return this;
		}

		public void unsetFmuGUID() {
			this.fmuGUID = null;
		}

		/**
		 * Returns true if field fmuGUID is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetFmuGUID() {
			return this.fmuGUID != null;
		}

		public void setFmuGUIDIsSet(boolean value) {
			if (!value) {
				this.fmuGUID = null;
			}
		}

		public java.lang.String getFmuResourceLocation() {
			return this.fmuResourceLocation;
		}

		public instanciate_args setFmuResourceLocation(java.lang.String fmuResourceLocation) {
			this.fmuResourceLocation = fmuResourceLocation;
			return this;
		}

		public void unsetFmuResourceLocation() {
			this.fmuResourceLocation = null;
		}

		/**
		 * Returns true if field fmuResourceLocation is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetFmuResourceLocation() {
			return this.fmuResourceLocation != null;
		}

		public void setFmuResourceLocationIsSet(boolean value) {
			if (!value) {
				this.fmuResourceLocation = null;
			}
		}

		public boolean isVisible() {
			return this.visible;
		}

		public instanciate_args setVisible(boolean visible) {
			this.visible = visible;
			setVisibleIsSet(true);
			return this;
		}

		public void unsetVisible() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISIBLE_ISSET_ID);
		}

		/**
		 * Returns true if field visible is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetVisible() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISIBLE_ISSET_ID);
		}

		public void setVisibleIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISIBLE_ISSET_ID, value);
		}

		public boolean isLoggingOn() {
			return this.loggingOn;
		}

		public instanciate_args setLoggingOn(boolean loggingOn) {
			this.loggingOn = loggingOn;
			setLoggingOnIsSet(true);
			return this;
		}

		public void unsetLoggingOn() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGGINGON_ISSET_ID);
		}

		/**
		 * Returns true if field loggingOn is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLoggingOn() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGGINGON_ISSET_ID);
		}

		public void setLoggingOnIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGGINGON_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case INSTANCE_NAME:
				if (value == null) {
					unsetInstanceName();
				} else {
					setInstanceName((java.lang.String) value);
				}
				break;

			case FMU_TYPE:
				if (value == null) {
					unsetFmuType();
				} else {
					setFmuType((Type) value);
				}
				break;

			case FMU_GUID:
				if (value == null) {
					unsetFmuGUID();
				} else {
					setFmuGUID((java.lang.String) value);
				}
				break;

			case FMU_RESOURCE_LOCATION:
				if (value == null) {
					unsetFmuResourceLocation();
				} else {
					setFmuResourceLocation((java.lang.String) value);
				}
				break;

			case VISIBLE:
				if (value == null) {
					unsetVisible();
				} else {
					setVisible((java.lang.Boolean) value);
				}
				break;

			case LOGGING_ON:
				if (value == null) {
					unsetLoggingOn();
				} else {
					setLoggingOn((java.lang.Boolean) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case INSTANCE_NAME:
				return getInstanceName();

			case FMU_TYPE:
				return getFmuType();

			case FMU_GUID:
				return getFmuGUID();

			case FMU_RESOURCE_LOCATION:
				return getFmuResourceLocation();

			case VISIBLE:
				return isVisible();

			case LOGGING_ON:
				return isLoggingOn();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case INSTANCE_NAME:
				return isSetInstanceName();
			case FMU_TYPE:
				return isSetFmuType();
			case FMU_GUID:
				return isSetFmuGUID();
			case FMU_RESOURCE_LOCATION:
				return isSetFmuResourceLocation();
			case VISIBLE:
				return isSetVisible();
			case LOGGING_ON:
				return isSetLoggingOn();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof instanciate_args)
				return this.equals((instanciate_args) that);
			return false;
		}

		public boolean equals(instanciate_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_instanceName = true && this.isSetInstanceName();
			boolean that_present_instanceName = true && that.isSetInstanceName();
			if (this_present_instanceName || that_present_instanceName) {
				if (!(this_present_instanceName && that_present_instanceName))
					return false;
				if (!this.instanceName.equals(that.instanceName))
					return false;
			}

			boolean this_present_fmuType = true && this.isSetFmuType();
			boolean that_present_fmuType = true && that.isSetFmuType();
			if (this_present_fmuType || that_present_fmuType) {
				if (!(this_present_fmuType && that_present_fmuType))
					return false;
				if (!this.fmuType.equals(that.fmuType))
					return false;
			}

			boolean this_present_fmuGUID = true && this.isSetFmuGUID();
			boolean that_present_fmuGUID = true && that.isSetFmuGUID();
			if (this_present_fmuGUID || that_present_fmuGUID) {
				if (!(this_present_fmuGUID && that_present_fmuGUID))
					return false;
				if (!this.fmuGUID.equals(that.fmuGUID))
					return false;
			}

			boolean this_present_fmuResourceLocation = true && this.isSetFmuResourceLocation();
			boolean that_present_fmuResourceLocation = true && that.isSetFmuResourceLocation();
			if (this_present_fmuResourceLocation || that_present_fmuResourceLocation) {
				if (!(this_present_fmuResourceLocation && that_present_fmuResourceLocation))
					return false;
				if (!this.fmuResourceLocation.equals(that.fmuResourceLocation))
					return false;
			}

			boolean this_present_visible = true;
			boolean that_present_visible = true;
			if (this_present_visible || that_present_visible) {
				if (!(this_present_visible && that_present_visible))
					return false;
				if (this.visible != that.visible)
					return false;
			}

			boolean this_present_loggingOn = true;
			boolean that_present_loggingOn = true;
			if (this_present_loggingOn || that_present_loggingOn) {
				if (!(this_present_loggingOn && that_present_loggingOn))
					return false;
				if (this.loggingOn != that.loggingOn)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetInstanceName()) ? 131071 : 524287);
			if (isSetInstanceName())
				hashCode = hashCode * 8191 + instanceName.hashCode();

			hashCode = hashCode * 8191 + ((isSetFmuType()) ? 131071 : 524287);
			if (isSetFmuType())
				hashCode = hashCode * 8191 + fmuType.getValue();

			hashCode = hashCode * 8191 + ((isSetFmuGUID()) ? 131071 : 524287);
			if (isSetFmuGUID())
				hashCode = hashCode * 8191 + fmuGUID.hashCode();

			hashCode = hashCode * 8191 + ((isSetFmuResourceLocation()) ? 131071 : 524287);
			if (isSetFmuResourceLocation())
				hashCode = hashCode * 8191 + fmuResourceLocation.hashCode();

			hashCode = hashCode * 8191 + ((visible) ? 131071 : 524287);

			hashCode = hashCode * 8191 + ((loggingOn) ? 131071 : 524287);

			return hashCode;
		}

		@Override
		public int compareTo(instanciate_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetInstanceName()).compareTo(other.isSetInstanceName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetInstanceName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceName, other.instanceName);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetFmuType()).compareTo(other.isSetFmuType());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetFmuType()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmuType, other.fmuType);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetFmuGUID()).compareTo(other.isSetFmuGUID());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetFmuGUID()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmuGUID, other.fmuGUID);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetFmuResourceLocation())
					.compareTo(other.isSetFmuResourceLocation());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetFmuResourceLocation()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmuResourceLocation,
						other.fmuResourceLocation);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetVisible()).compareTo(other.isSetVisible());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVisible()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible, other.visible);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetLoggingOn()).compareTo(other.isSetLoggingOn());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLoggingOn()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loggingOn, other.loggingOn);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("instanciate_args(");
			boolean first = true;

			sb.append("instanceName:");
			if (this.instanceName == null) {
				sb.append("null");
			} else {
				sb.append(this.instanceName);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("fmuType:");
			if (this.fmuType == null) {
				sb.append("null");
			} else {
				sb.append(this.fmuType);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("fmuGUID:");
			if (this.fmuGUID == null) {
				sb.append("null");
			} else {
				sb.append(this.fmuGUID);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("fmuResourceLocation:");
			if (this.fmuResourceLocation == null) {
				sb.append("null");
			} else {
				sb.append(this.fmuResourceLocation);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("visible:");
			sb.append(this.visible);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("loggingOn:");
			sb.append(this.loggingOn);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class instanciate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public instanciate_argsStandardScheme getScheme() {
				return new instanciate_argsStandardScheme();
			}
		}

		private static class instanciate_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<instanciate_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, instanciate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // INSTANCE_NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.instanceName = iprot.readString();
							struct.setInstanceNameIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // FMU_TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.fmuType = org.raspinloop.emulator.proxyserver.fmi.Type.findByValue(iprot.readI32());
							struct.setFmuTypeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // FMU_GUID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.fmuGUID = iprot.readString();
							struct.setFmuGUIDIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // FMU_RESOURCE_LOCATION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.fmuResourceLocation = iprot.readString();
							struct.setFmuResourceLocationIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // VISIBLE
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.visible = iprot.readBool();
							struct.setVisibleIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 6: // LOGGING_ON
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.loggingOn = iprot.readBool();
							struct.setLoggingOnIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, instanciate_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.instanceName != null) {
					oprot.writeFieldBegin(INSTANCE_NAME_FIELD_DESC);
					oprot.writeString(struct.instanceName);
					oprot.writeFieldEnd();
				}
				if (struct.fmuType != null) {
					oprot.writeFieldBegin(FMU_TYPE_FIELD_DESC);
					oprot.writeI32(struct.fmuType.getValue());
					oprot.writeFieldEnd();
				}
				if (struct.fmuGUID != null) {
					oprot.writeFieldBegin(FMU_GUID_FIELD_DESC);
					oprot.writeString(struct.fmuGUID);
					oprot.writeFieldEnd();
				}
				if (struct.fmuResourceLocation != null) {
					oprot.writeFieldBegin(FMU_RESOURCE_LOCATION_FIELD_DESC);
					oprot.writeString(struct.fmuResourceLocation);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(VISIBLE_FIELD_DESC);
				oprot.writeBool(struct.visible);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(LOGGING_ON_FIELD_DESC);
				oprot.writeBool(struct.loggingOn);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class instanciate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public instanciate_argsTupleScheme getScheme() {
				return new instanciate_argsTupleScheme();
			}
		}

		private static class instanciate_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<instanciate_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, instanciate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetInstanceName()) {
					optionals.set(0);
				}
				if (struct.isSetFmuType()) {
					optionals.set(1);
				}
				if (struct.isSetFmuGUID()) {
					optionals.set(2);
				}
				if (struct.isSetFmuResourceLocation()) {
					optionals.set(3);
				}
				if (struct.isSetVisible()) {
					optionals.set(4);
				}
				if (struct.isSetLoggingOn()) {
					optionals.set(5);
				}
				oprot.writeBitSet(optionals, 6);
				if (struct.isSetInstanceName()) {
					oprot.writeString(struct.instanceName);
				}
				if (struct.isSetFmuType()) {
					oprot.writeI32(struct.fmuType.getValue());
				}
				if (struct.isSetFmuGUID()) {
					oprot.writeString(struct.fmuGUID);
				}
				if (struct.isSetFmuResourceLocation()) {
					oprot.writeString(struct.fmuResourceLocation);
				}
				if (struct.isSetVisible()) {
					oprot.writeBool(struct.visible);
				}
				if (struct.isSetLoggingOn()) {
					oprot.writeBool(struct.loggingOn);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, instanciate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(6);
				if (incoming.get(0)) {
					struct.instanceName = iprot.readString();
					struct.setInstanceNameIsSet(true);
				}
				if (incoming.get(1)) {
					struct.fmuType = org.raspinloop.emulator.proxyserver.fmi.Type.findByValue(iprot.readI32());
					struct.setFmuTypeIsSet(true);
				}
				if (incoming.get(2)) {
					struct.fmuGUID = iprot.readString();
					struct.setFmuGUIDIsSet(true);
				}
				if (incoming.get(3)) {
					struct.fmuResourceLocation = iprot.readString();
					struct.setFmuResourceLocationIsSet(true);
				}
				if (incoming.get(4)) {
					struct.visible = iprot.readBool();
					struct.setVisibleIsSet(true);
				}
				if (incoming.get(5)) {
					struct.loggingOn = iprot.readBool();
					struct.setLoggingOnIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class instanciate_result
			implements org.apache.thrift.TBase<instanciate_result, instanciate_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<instanciate_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"instanciate_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new instanciate_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new instanciate_resultTupleSchemeFactory();

		public Instance success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanciate_result.class, metaDataMap);
		}

		public instanciate_result() {
		}

		public instanciate_result(Instance success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public instanciate_result(instanciate_result other) {
			if (other.isSetSuccess()) {
				this.success = new Instance(other.success);
			}
		}

		public instanciate_result deepCopy() {
			return new instanciate_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public Instance getSuccess() {
			return this.success;
		}

		public instanciate_result setSuccess(Instance success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Instance) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof instanciate_result)
				return this.equals((instanciate_result) that);
			return false;
		}

		public boolean equals(instanciate_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(instanciate_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("instanciate_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class instanciate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public instanciate_resultStandardScheme getScheme() {
				return new instanciate_resultStandardScheme();
			}
		}

		private static class instanciate_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<instanciate_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, instanciate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Instance();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, instanciate_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class instanciate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public instanciate_resultTupleScheme getScheme() {
				return new instanciate_resultTupleScheme();
			}
		}

		private static class instanciate_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<instanciate_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, instanciate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, instanciate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new Instance();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setupExperiment_args
			implements org.apache.thrift.TBase<setupExperiment_args, setupExperiment_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setupExperiment_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setupExperiment_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField TOLERANCE_DEFINED_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"toleranceDefined", org.apache.thrift.protocol.TType.BOOL, (short) 2);
		private static final org.apache.thrift.protocol.TField TOLERANCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tolerance", org.apache.thrift.protocol.TType.DOUBLE, (short) 3);
		private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"startTime", org.apache.thrift.protocol.TType.DOUBLE, (short) 4);
		private static final org.apache.thrift.protocol.TField STOP_TIME_DEFINED_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"stopTimeDefined", org.apache.thrift.protocol.TType.BOOL, (short) 5);
		private static final org.apache.thrift.protocol.TField STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"stopTime", org.apache.thrift.protocol.TType.DOUBLE, (short) 6);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setupExperiment_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setupExperiment_argsTupleSchemeFactory();

		public Instance c; // required
		public boolean toleranceDefined; // required
		public double tolerance; // required
		public double startTime; // required
		public boolean stopTimeDefined; // required
		public double stopTime; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), TOLERANCE_DEFINED((short) 2, "toleranceDefined"), TOLERANCE((short) 3, "tolerance"),
			START_TIME((short) 4, "startTime"), STOP_TIME_DEFINED((short) 5, "stopTimeDefined"),
			STOP_TIME((short) 6, "stopTime");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // TOLERANCE_DEFINED
					return TOLERANCE_DEFINED;
				case 3: // TOLERANCE
					return TOLERANCE;
				case 4: // START_TIME
					return START_TIME;
				case 5: // STOP_TIME_DEFINED
					return STOP_TIME_DEFINED;
				case 6: // STOP_TIME
					return STOP_TIME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __TOLERANCEDEFINED_ISSET_ID = 0;
		private static final int __TOLERANCE_ISSET_ID = 1;
		private static final int __STARTTIME_ISSET_ID = 2;
		private static final int __STOPTIMEDEFINED_ISSET_ID = 3;
		private static final int __STOPTIME_ISSET_ID = 4;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.TOLERANCE_DEFINED,
					new org.apache.thrift.meta_data.FieldMetaData("toleranceDefined",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.TOLERANCE, new org.apache.thrift.meta_data.FieldMetaData("tolerance",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
			tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
			tmpMap.put(_Fields.STOP_TIME_DEFINED,
					new org.apache.thrift.meta_data.FieldMetaData("stopTimeDefined",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("stopTime",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setupExperiment_args.class, metaDataMap);
		}

		public setupExperiment_args() {
		}

		public setupExperiment_args(Instance c, boolean toleranceDefined, double tolerance, double startTime,
				boolean stopTimeDefined, double stopTime) {
			this();
			this.c = c;
			this.toleranceDefined = toleranceDefined;
			setToleranceDefinedIsSet(true);
			this.tolerance = tolerance;
			setToleranceIsSet(true);
			this.startTime = startTime;
			setStartTimeIsSet(true);
			this.stopTimeDefined = stopTimeDefined;
			setStopTimeDefinedIsSet(true);
			this.stopTime = stopTime;
			setStopTimeIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setupExperiment_args(setupExperiment_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			this.toleranceDefined = other.toleranceDefined;
			this.tolerance = other.tolerance;
			this.startTime = other.startTime;
			this.stopTimeDefined = other.stopTimeDefined;
			this.stopTime = other.stopTime;
		}

		public setupExperiment_args deepCopy() {
			return new setupExperiment_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			setToleranceDefinedIsSet(false);
			this.toleranceDefined = false;
			setToleranceIsSet(false);
			this.tolerance = 0.0;
			setStartTimeIsSet(false);
			this.startTime = 0.0;
			setStopTimeDefinedIsSet(false);
			this.stopTimeDefined = false;
			setStopTimeIsSet(false);
			this.stopTime = 0.0;
		}

		public Instance getC() {
			return this.c;
		}

		public setupExperiment_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public boolean isToleranceDefined() {
			return this.toleranceDefined;
		}

		public setupExperiment_args setToleranceDefined(boolean toleranceDefined) {
			this.toleranceDefined = toleranceDefined;
			setToleranceDefinedIsSet(true);
			return this;
		}

		public void unsetToleranceDefined() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOLERANCEDEFINED_ISSET_ID);
		}

		/**
		 * Returns true if field toleranceDefined is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetToleranceDefined() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOLERANCEDEFINED_ISSET_ID);
		}

		public void setToleranceDefinedIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOLERANCEDEFINED_ISSET_ID,
					value);
		}

		public double getTolerance() {
			return this.tolerance;
		}

		public setupExperiment_args setTolerance(double tolerance) {
			this.tolerance = tolerance;
			setToleranceIsSet(true);
			return this;
		}

		public void unsetTolerance() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOLERANCE_ISSET_ID);
		}

		/**
		 * Returns true if field tolerance is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetTolerance() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOLERANCE_ISSET_ID);
		}

		public void setToleranceIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOLERANCE_ISSET_ID, value);
		}

		public double getStartTime() {
			return this.startTime;
		}

		public setupExperiment_args setStartTime(double startTime) {
			this.startTime = startTime;
			setStartTimeIsSet(true);
			return this;
		}

		public void unsetStartTime() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
		}

		/**
		 * Returns true if field startTime is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetStartTime() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
		}

		public void setStartTimeIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
		}

		public boolean isStopTimeDefined() {
			return this.stopTimeDefined;
		}

		public setupExperiment_args setStopTimeDefined(boolean stopTimeDefined) {
			this.stopTimeDefined = stopTimeDefined;
			setStopTimeDefinedIsSet(true);
			return this;
		}

		public void unsetStopTimeDefined() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOPTIMEDEFINED_ISSET_ID);
		}

		/**
		 * Returns true if field stopTimeDefined is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetStopTimeDefined() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOPTIMEDEFINED_ISSET_ID);
		}

		public void setStopTimeDefinedIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOPTIMEDEFINED_ISSET_ID,
					value);
		}

		public double getStopTime() {
			return this.stopTime;
		}

		public setupExperiment_args setStopTime(double stopTime) {
			this.stopTime = stopTime;
			setStopTimeIsSet(true);
			return this;
		}

		public void unsetStopTime() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOPTIME_ISSET_ID);
		}

		/**
		 * Returns true if field stopTime is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetStopTime() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOPTIME_ISSET_ID);
		}

		public void setStopTimeIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOPTIME_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case TOLERANCE_DEFINED:
				if (value == null) {
					unsetToleranceDefined();
				} else {
					setToleranceDefined((java.lang.Boolean) value);
				}
				break;

			case TOLERANCE:
				if (value == null) {
					unsetTolerance();
				} else {
					setTolerance((java.lang.Double) value);
				}
				break;

			case START_TIME:
				if (value == null) {
					unsetStartTime();
				} else {
					setStartTime((java.lang.Double) value);
				}
				break;

			case STOP_TIME_DEFINED:
				if (value == null) {
					unsetStopTimeDefined();
				} else {
					setStopTimeDefined((java.lang.Boolean) value);
				}
				break;

			case STOP_TIME:
				if (value == null) {
					unsetStopTime();
				} else {
					setStopTime((java.lang.Double) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case TOLERANCE_DEFINED:
				return isToleranceDefined();

			case TOLERANCE:
				return getTolerance();

			case START_TIME:
				return getStartTime();

			case STOP_TIME_DEFINED:
				return isStopTimeDefined();

			case STOP_TIME:
				return getStopTime();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case TOLERANCE_DEFINED:
				return isSetToleranceDefined();
			case TOLERANCE:
				return isSetTolerance();
			case START_TIME:
				return isSetStartTime();
			case STOP_TIME_DEFINED:
				return isSetStopTimeDefined();
			case STOP_TIME:
				return isSetStopTime();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setupExperiment_args)
				return this.equals((setupExperiment_args) that);
			return false;
		}

		public boolean equals(setupExperiment_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_toleranceDefined = true;
			boolean that_present_toleranceDefined = true;
			if (this_present_toleranceDefined || that_present_toleranceDefined) {
				if (!(this_present_toleranceDefined && that_present_toleranceDefined))
					return false;
				if (this.toleranceDefined != that.toleranceDefined)
					return false;
			}

			boolean this_present_tolerance = true;
			boolean that_present_tolerance = true;
			if (this_present_tolerance || that_present_tolerance) {
				if (!(this_present_tolerance && that_present_tolerance))
					return false;
				if (this.tolerance != that.tolerance)
					return false;
			}

			boolean this_present_startTime = true;
			boolean that_present_startTime = true;
			if (this_present_startTime || that_present_startTime) {
				if (!(this_present_startTime && that_present_startTime))
					return false;
				if (this.startTime != that.startTime)
					return false;
			}

			boolean this_present_stopTimeDefined = true;
			boolean that_present_stopTimeDefined = true;
			if (this_present_stopTimeDefined || that_present_stopTimeDefined) {
				if (!(this_present_stopTimeDefined && that_present_stopTimeDefined))
					return false;
				if (this.stopTimeDefined != that.stopTimeDefined)
					return false;
			}

			boolean this_present_stopTime = true;
			boolean that_present_stopTime = true;
			if (this_present_stopTime || that_present_stopTime) {
				if (!(this_present_stopTime && that_present_stopTime))
					return false;
				if (this.stopTime != that.stopTime)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((toleranceDefined) ? 131071 : 524287);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tolerance);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTime);

			hashCode = hashCode * 8191 + ((stopTimeDefined) ? 131071 : 524287);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(stopTime);

			return hashCode;
		}

		@Override
		public int compareTo(setupExperiment_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetToleranceDefined())
					.compareTo(other.isSetToleranceDefined());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetToleranceDefined()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toleranceDefined, other.toleranceDefined);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetTolerance()).compareTo(other.isSetTolerance());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTolerance()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tolerance, other.tolerance);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetStartTime()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetStopTimeDefined()).compareTo(other.isSetStopTimeDefined());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetStopTimeDefined()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopTimeDefined, other.stopTimeDefined);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetStopTime()).compareTo(other.isSetStopTime());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetStopTime()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopTime, other.stopTime);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setupExperiment_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("toleranceDefined:");
			sb.append(this.toleranceDefined);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tolerance:");
			sb.append(this.tolerance);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("startTime:");
			sb.append(this.startTime);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("stopTimeDefined:");
			sb.append(this.stopTimeDefined);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("stopTime:");
			sb.append(this.stopTime);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setupExperiment_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setupExperiment_argsStandardScheme getScheme() {
				return new setupExperiment_argsStandardScheme();
			}
		}

		private static class setupExperiment_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setupExperiment_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setupExperiment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // TOLERANCE_DEFINED
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.toleranceDefined = iprot.readBool();
							struct.setToleranceDefinedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // TOLERANCE
						if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
							struct.tolerance = iprot.readDouble();
							struct.setToleranceIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // START_TIME
						if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
							struct.startTime = iprot.readDouble();
							struct.setStartTimeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // STOP_TIME_DEFINED
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.stopTimeDefined = iprot.readBool();
							struct.setStopTimeDefinedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 6: // STOP_TIME
						if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
							struct.stopTime = iprot.readDouble();
							struct.setStopTimeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setupExperiment_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(TOLERANCE_DEFINED_FIELD_DESC);
				oprot.writeBool(struct.toleranceDefined);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(TOLERANCE_FIELD_DESC);
				oprot.writeDouble(struct.tolerance);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(START_TIME_FIELD_DESC);
				oprot.writeDouble(struct.startTime);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(STOP_TIME_DEFINED_FIELD_DESC);
				oprot.writeBool(struct.stopTimeDefined);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(STOP_TIME_FIELD_DESC);
				oprot.writeDouble(struct.stopTime);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setupExperiment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setupExperiment_argsTupleScheme getScheme() {
				return new setupExperiment_argsTupleScheme();
			}
		}

		private static class setupExperiment_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setupExperiment_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setupExperiment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetToleranceDefined()) {
					optionals.set(1);
				}
				if (struct.isSetTolerance()) {
					optionals.set(2);
				}
				if (struct.isSetStartTime()) {
					optionals.set(3);
				}
				if (struct.isSetStopTimeDefined()) {
					optionals.set(4);
				}
				if (struct.isSetStopTime()) {
					optionals.set(5);
				}
				oprot.writeBitSet(optionals, 6);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetToleranceDefined()) {
					oprot.writeBool(struct.toleranceDefined);
				}
				if (struct.isSetTolerance()) {
					oprot.writeDouble(struct.tolerance);
				}
				if (struct.isSetStartTime()) {
					oprot.writeDouble(struct.startTime);
				}
				if (struct.isSetStopTimeDefined()) {
					oprot.writeBool(struct.stopTimeDefined);
				}
				if (struct.isSetStopTime()) {
					oprot.writeDouble(struct.stopTime);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setupExperiment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(6);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					struct.toleranceDefined = iprot.readBool();
					struct.setToleranceDefinedIsSet(true);
				}
				if (incoming.get(2)) {
					struct.tolerance = iprot.readDouble();
					struct.setToleranceIsSet(true);
				}
				if (incoming.get(3)) {
					struct.startTime = iprot.readDouble();
					struct.setStartTimeIsSet(true);
				}
				if (incoming.get(4)) {
					struct.stopTimeDefined = iprot.readBool();
					struct.setStopTimeDefinedIsSet(true);
				}
				if (incoming.get(5)) {
					struct.stopTime = iprot.readDouble();
					struct.setStopTimeIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setupExperiment_result
			implements org.apache.thrift.TBase<setupExperiment_result, setupExperiment_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setupExperiment_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setupExperiment_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setupExperiment_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setupExperiment_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setupExperiment_result.class, metaDataMap);
		}

		public setupExperiment_result() {
		}

		public setupExperiment_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setupExperiment_result(setupExperiment_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public setupExperiment_result deepCopy() {
			return new setupExperiment_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public setupExperiment_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setupExperiment_result)
				return this.equals((setupExperiment_result) that);
			return false;
		}

		public boolean equals(setupExperiment_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(setupExperiment_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setupExperiment_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setupExperiment_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setupExperiment_resultStandardScheme getScheme() {
				return new setupExperiment_resultStandardScheme();
			}
		}

		private static class setupExperiment_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setupExperiment_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setupExperiment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setupExperiment_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setupExperiment_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setupExperiment_resultTupleScheme getScheme() {
				return new setupExperiment_resultTupleScheme();
			}
		}

		private static class setupExperiment_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setupExperiment_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setupExperiment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setupExperiment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class enterInitializationMode_args
			implements org.apache.thrift.TBase<enterInitializationMode_args, enterInitializationMode_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<enterInitializationMode_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"enterInitializationMode_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enterInitializationMode_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enterInitializationMode_argsTupleSchemeFactory();

		public Instance c; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enterInitializationMode_args.class,
					metaDataMap);
		}

		public enterInitializationMode_args() {
		}

		public enterInitializationMode_args(Instance c) {
			this();
			this.c = c;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public enterInitializationMode_args(enterInitializationMode_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
		}

		public enterInitializationMode_args deepCopy() {
			return new enterInitializationMode_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
		}

		public Instance getC() {
			return this.c;
		}

		public enterInitializationMode_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof enterInitializationMode_args)
				return this.equals((enterInitializationMode_args) that);
			return false;
		}

		public boolean equals(enterInitializationMode_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(enterInitializationMode_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("enterInitializationMode_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class enterInitializationMode_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public enterInitializationMode_argsStandardScheme getScheme() {
				return new enterInitializationMode_argsStandardScheme();
			}
		}

		private static class enterInitializationMode_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<enterInitializationMode_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, enterInitializationMode_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, enterInitializationMode_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class enterInitializationMode_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public enterInitializationMode_argsTupleScheme getScheme() {
				return new enterInitializationMode_argsTupleScheme();
			}
		}

		private static class enterInitializationMode_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<enterInitializationMode_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, enterInitializationMode_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, enterInitializationMode_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class enterInitializationMode_result
			implements org.apache.thrift.TBase<enterInitializationMode_result, enterInitializationMode_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<enterInitializationMode_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"enterInitializationMode_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enterInitializationMode_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enterInitializationMode_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enterInitializationMode_result.class,
					metaDataMap);
		}

		public enterInitializationMode_result() {
		}

		public enterInitializationMode_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public enterInitializationMode_result(enterInitializationMode_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public enterInitializationMode_result deepCopy() {
			return new enterInitializationMode_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public enterInitializationMode_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof enterInitializationMode_result)
				return this.equals((enterInitializationMode_result) that);
			return false;
		}

		public boolean equals(enterInitializationMode_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(enterInitializationMode_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("enterInitializationMode_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class enterInitializationMode_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public enterInitializationMode_resultStandardScheme getScheme() {
				return new enterInitializationMode_resultStandardScheme();
			}
		}

		private static class enterInitializationMode_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<enterInitializationMode_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, enterInitializationMode_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, enterInitializationMode_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class enterInitializationMode_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public enterInitializationMode_resultTupleScheme getScheme() {
				return new enterInitializationMode_resultTupleScheme();
			}
		}

		private static class enterInitializationMode_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<enterInitializationMode_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, enterInitializationMode_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, enterInitializationMode_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class exitInitializationMode_args
			implements org.apache.thrift.TBase<exitInitializationMode_args, exitInitializationMode_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<exitInitializationMode_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"exitInitializationMode_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exitInitializationMode_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exitInitializationMode_argsTupleSchemeFactory();

		public Instance c; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exitInitializationMode_args.class,
					metaDataMap);
		}

		public exitInitializationMode_args() {
		}

		public exitInitializationMode_args(Instance c) {
			this();
			this.c = c;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public exitInitializationMode_args(exitInitializationMode_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
		}

		public exitInitializationMode_args deepCopy() {
			return new exitInitializationMode_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
		}

		public Instance getC() {
			return this.c;
		}

		public exitInitializationMode_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof exitInitializationMode_args)
				return this.equals((exitInitializationMode_args) that);
			return false;
		}

		public boolean equals(exitInitializationMode_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(exitInitializationMode_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("exitInitializationMode_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class exitInitializationMode_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public exitInitializationMode_argsStandardScheme getScheme() {
				return new exitInitializationMode_argsStandardScheme();
			}
		}

		private static class exitInitializationMode_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<exitInitializationMode_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, exitInitializationMode_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, exitInitializationMode_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class exitInitializationMode_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public exitInitializationMode_argsTupleScheme getScheme() {
				return new exitInitializationMode_argsTupleScheme();
			}
		}

		private static class exitInitializationMode_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<exitInitializationMode_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, exitInitializationMode_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, exitInitializationMode_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class exitInitializationMode_result
			implements org.apache.thrift.TBase<exitInitializationMode_result, exitInitializationMode_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<exitInitializationMode_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"exitInitializationMode_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exitInitializationMode_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exitInitializationMode_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exitInitializationMode_result.class,
					metaDataMap);
		}

		public exitInitializationMode_result() {
		}

		public exitInitializationMode_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public exitInitializationMode_result(exitInitializationMode_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public exitInitializationMode_result deepCopy() {
			return new exitInitializationMode_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public exitInitializationMode_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof exitInitializationMode_result)
				return this.equals((exitInitializationMode_result) that);
			return false;
		}

		public boolean equals(exitInitializationMode_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(exitInitializationMode_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("exitInitializationMode_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class exitInitializationMode_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public exitInitializationMode_resultStandardScheme getScheme() {
				return new exitInitializationMode_resultStandardScheme();
			}
		}

		private static class exitInitializationMode_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<exitInitializationMode_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, exitInitializationMode_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, exitInitializationMode_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class exitInitializationMode_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public exitInitializationMode_resultTupleScheme getScheme() {
				return new exitInitializationMode_resultTupleScheme();
			}
		}

		private static class exitInitializationMode_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<exitInitializationMode_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, exitInitializationMode_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, exitInitializationMode_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class terminate_args implements org.apache.thrift.TBase<terminate_args, terminate_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<terminate_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"terminate_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminate_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminate_argsTupleSchemeFactory();

		public Instance c; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminate_args.class, metaDataMap);
		}

		public terminate_args() {
		}

		public terminate_args(Instance c) {
			this();
			this.c = c;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public terminate_args(terminate_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
		}

		public terminate_args deepCopy() {
			return new terminate_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
		}

		public Instance getC() {
			return this.c;
		}

		public terminate_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof terminate_args)
				return this.equals((terminate_args) that);
			return false;
		}

		public boolean equals(terminate_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(terminate_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("terminate_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class terminate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public terminate_argsStandardScheme getScheme() {
				return new terminate_argsStandardScheme();
			}
		}

		private static class terminate_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<terminate_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, terminate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, terminate_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class terminate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public terminate_argsTupleScheme getScheme() {
				return new terminate_argsTupleScheme();
			}
		}

		private static class terminate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminate_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, terminate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, terminate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class terminate_result implements org.apache.thrift.TBase<terminate_result, terminate_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<terminate_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"terminate_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminate_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminate_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminate_result.class, metaDataMap);
		}

		public terminate_result() {
		}

		public terminate_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public terminate_result(terminate_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public terminate_result deepCopy() {
			return new terminate_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public terminate_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof terminate_result)
				return this.equals((terminate_result) that);
			return false;
		}

		public boolean equals(terminate_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(terminate_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("terminate_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class terminate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public terminate_resultStandardScheme getScheme() {
				return new terminate_resultStandardScheme();
			}
		}

		private static class terminate_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<terminate_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, terminate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, terminate_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class terminate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public terminate_resultTupleScheme getScheme() {
				return new terminate_resultTupleScheme();
			}
		}

		private static class terminate_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<terminate_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, terminate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, terminate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class reset_args implements org.apache.thrift.TBase<reset_args, reset_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<reset_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"reset_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reset_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reset_argsTupleSchemeFactory();

		public Instance c; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_args.class, metaDataMap);
		}

		public reset_args() {
		}

		public reset_args(Instance c) {
			this();
			this.c = c;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public reset_args(reset_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
		}

		public reset_args deepCopy() {
			return new reset_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
		}

		public Instance getC() {
			return this.c;
		}

		public reset_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof reset_args)
				return this.equals((reset_args) that);
			return false;
		}

		public boolean equals(reset_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(reset_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("reset_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class reset_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public reset_argsStandardScheme getScheme() {
				return new reset_argsStandardScheme();
			}
		}

		private static class reset_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reset_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, reset_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, reset_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class reset_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public reset_argsTupleScheme getScheme() {
				return new reset_argsTupleScheme();
			}
		}

		private static class reset_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reset_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, reset_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, reset_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class reset_result implements org.apache.thrift.TBase<reset_result, reset_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<reset_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"reset_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reset_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reset_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_result.class, metaDataMap);
		}

		public reset_result() {
		}

		public reset_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public reset_result(reset_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public reset_result deepCopy() {
			return new reset_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public reset_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof reset_result)
				return this.equals((reset_result) that);
			return false;
		}

		public boolean equals(reset_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(reset_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("reset_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class reset_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public reset_resultStandardScheme getScheme() {
				return new reset_resultStandardScheme();
			}
		}

		private static class reset_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reset_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, reset_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, reset_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class reset_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public reset_resultTupleScheme getScheme() {
				return new reset_resultTupleScheme();
			}
		}

		private static class reset_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reset_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, reset_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, reset_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class freeInstance_args
			implements org.apache.thrift.TBase<freeInstance_args, freeInstance_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<freeInstance_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"freeInstance_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new freeInstance_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new freeInstance_argsTupleSchemeFactory();

		public Instance c; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freeInstance_args.class, metaDataMap);
		}

		public freeInstance_args() {
		}

		public freeInstance_args(Instance c) {
			this();
			this.c = c;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public freeInstance_args(freeInstance_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
		}

		public freeInstance_args deepCopy() {
			return new freeInstance_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
		}

		public Instance getC() {
			return this.c;
		}

		public freeInstance_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof freeInstance_args)
				return this.equals((freeInstance_args) that);
			return false;
		}

		public boolean equals(freeInstance_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(freeInstance_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("freeInstance_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class freeInstance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public freeInstance_argsStandardScheme getScheme() {
				return new freeInstance_argsStandardScheme();
			}
		}

		private static class freeInstance_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<freeInstance_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, freeInstance_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, freeInstance_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class freeInstance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public freeInstance_argsTupleScheme getScheme() {
				return new freeInstance_argsTupleScheme();
			}
		}

		private static class freeInstance_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<freeInstance_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, freeInstance_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, freeInstance_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class freeInstance_result
			implements org.apache.thrift.TBase<freeInstance_result, freeInstance_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<freeInstance_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"freeInstance_result");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new freeInstance_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new freeInstance_resultTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freeInstance_result.class, metaDataMap);
		}

		public freeInstance_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public freeInstance_result(freeInstance_result other) {
		}

		public freeInstance_result deepCopy() {
			return new freeInstance_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof freeInstance_result)
				return this.equals((freeInstance_result) that);
			return false;
		}

		public boolean equals(freeInstance_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(freeInstance_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("freeInstance_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class freeInstance_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public freeInstance_resultStandardScheme getScheme() {
				return new freeInstance_resultStandardScheme();
			}
		}

		private static class freeInstance_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<freeInstance_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, freeInstance_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, freeInstance_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class freeInstance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public freeInstance_resultTupleScheme getScheme() {
				return new freeInstance_resultTupleScheme();
			}
		}

		private static class freeInstance_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<freeInstance_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, freeInstance_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, freeInstance_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getReal_args implements org.apache.thrift.TBase<getReal_args, getReal_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getReal_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getReal_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REFS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"refs", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReal_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReal_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.List<java.lang.Integer> refs; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REFS((short) 2, "refs");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REFS
					return REFS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REFS, new org.apache.thrift.meta_data.FieldMetaData("refs",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReal_args.class, metaDataMap);
		}

		public getReal_args() {
		}

		public getReal_args(Instance c, java.util.List<java.lang.Integer> refs) {
			this();
			this.c = c;
			this.refs = refs;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getReal_args(getReal_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRefs()) {
				java.util.List<java.lang.Integer> __this__refs = new java.util.ArrayList<java.lang.Integer>(other.refs);
				this.refs = __this__refs;
			}
		}

		public getReal_args deepCopy() {
			return new getReal_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.refs = null;
		}

		public Instance getC() {
			return this.c;
		}

		public getReal_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRefsSize() {
			return (this.refs == null) ? 0 : this.refs.size();
		}

		public java.util.Iterator<java.lang.Integer> getRefsIterator() {
			return (this.refs == null) ? null : this.refs.iterator();
		}

		public void addToRefs(int elem) {
			if (this.refs == null) {
				this.refs = new java.util.ArrayList<java.lang.Integer>();
			}
			this.refs.add(elem);
		}

		public java.util.List<java.lang.Integer> getRefs() {
			return this.refs;
		}

		public getReal_args setRefs(java.util.List<java.lang.Integer> refs) {
			this.refs = refs;
			return this;
		}

		public void unsetRefs() {
			this.refs = null;
		}

		/**
		 * Returns true if field refs is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRefs() {
			return this.refs != null;
		}

		public void setRefsIsSet(boolean value) {
			if (!value) {
				this.refs = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REFS:
				if (value == null) {
					unsetRefs();
				} else {
					setRefs((java.util.List<java.lang.Integer>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REFS:
				return getRefs();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REFS:
				return isSetRefs();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getReal_args)
				return this.equals((getReal_args) that);
			return false;
		}

		public boolean equals(getReal_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_refs = true && this.isSetRefs();
			boolean that_present_refs = true && that.isSetRefs();
			if (this_present_refs || that_present_refs) {
				if (!(this_present_refs && that_present_refs))
					return false;
				if (!this.refs.equals(that.refs))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRefs()) ? 131071 : 524287);
			if (isSetRefs())
				hashCode = hashCode * 8191 + refs.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getReal_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRefs()).compareTo(other.isSetRefs());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRefs()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refs, other.refs);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getReal_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("refs:");
			if (this.refs == null) {
				sb.append("null");
			} else {
				sb.append(this.refs);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getReal_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getReal_argsStandardScheme getScheme() {
				return new getReal_argsStandardScheme();
			}
		}

		private static class getReal_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReal_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getReal_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REFS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
								struct.refs = new java.util.ArrayList<java.lang.Integer>(_list0.size);
								int _elem1;
								for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
									_elem1 = iprot.readI32();
									struct.refs.add(_elem1);
								}
								iprot.readListEnd();
							}
							struct.setRefsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getReal_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.refs != null) {
					oprot.writeFieldBegin(REFS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,
								struct.refs.size()));
						for (int _iter3 : struct.refs) {
							oprot.writeI32(_iter3);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getReal_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getReal_argsTupleScheme getScheme() {
				return new getReal_argsTupleScheme();
			}
		}

		private static class getReal_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReal_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getReal_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRefs()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRefs()) {
					{
						oprot.writeI32(struct.refs.size());
						for (int _iter4 : struct.refs) {
							oprot.writeI32(_iter4);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getReal_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.I32, iprot.readI32());
						struct.refs = new java.util.ArrayList<java.lang.Integer>(_list5.size);
						int _elem6;
						for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
							_elem6 = iprot.readI32();
							struct.refs.add(_elem6);
						}
					}
					struct.setRefsIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getReal_result implements org.apache.thrift.TBase<getReal_result, getReal_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getReal_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getReal_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReal_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReal_resultTupleSchemeFactory();

		public java.util.List<java.lang.Double> success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.DOUBLE))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReal_result.class, metaDataMap);
		}

		public getReal_result() {
		}

		public getReal_result(java.util.List<java.lang.Double> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getReal_result(getReal_result other) {
			if (other.isSetSuccess()) {
				java.util.List<java.lang.Double> __this__success = new java.util.ArrayList<java.lang.Double>(
						other.success);
				this.success = __this__success;
			}
		}

		public getReal_result deepCopy() {
			return new getReal_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<java.lang.Double> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(double elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<java.lang.Double>();
			}
			this.success.add(elem);
		}

		public java.util.List<java.lang.Double> getSuccess() {
			return this.success;
		}

		public getReal_result setSuccess(java.util.List<java.lang.Double> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.util.List<java.lang.Double>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getReal_result)
				return this.equals((getReal_result) that);
			return false;
		}

		public boolean equals(getReal_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getReal_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getReal_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getReal_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getReal_resultStandardScheme getScheme() {
				return new getReal_resultStandardScheme();
			}
		}

		private static class getReal_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getReal_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getReal_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<java.lang.Double>(_list8.size);
								double _elem9;
								for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
									_elem9 = iprot.readDouble();
									struct.success.add(_elem9);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getReal_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
						for (double _iter11 : struct.success) {
							oprot.writeDouble(_iter11);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getReal_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getReal_resultTupleScheme getScheme() {
				return new getReal_resultTupleScheme();
			}
		}

		private static class getReal_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReal_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getReal_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (double _iter12 : struct.success) {
							oprot.writeDouble(_iter12);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getReal_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
						struct.success = new java.util.ArrayList<java.lang.Double>(_list13.size);
						double _elem14;
						for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
							_elem14 = iprot.readDouble();
							struct.success.add(_elem14);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getInteger_args implements org.apache.thrift.TBase<getInteger_args, getInteger_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getInteger_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getInteger_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REFS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"refs", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInteger_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInteger_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.List<java.lang.Integer> refs; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REFS((short) 2, "refs");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REFS
					return REFS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REFS, new org.apache.thrift.meta_data.FieldMetaData("refs",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInteger_args.class, metaDataMap);
		}

		public getInteger_args() {
		}

		public getInteger_args(Instance c, java.util.List<java.lang.Integer> refs) {
			this();
			this.c = c;
			this.refs = refs;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getInteger_args(getInteger_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRefs()) {
				java.util.List<java.lang.Integer> __this__refs = new java.util.ArrayList<java.lang.Integer>(other.refs);
				this.refs = __this__refs;
			}
		}

		public getInteger_args deepCopy() {
			return new getInteger_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.refs = null;
		}

		public Instance getC() {
			return this.c;
		}

		public getInteger_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRefsSize() {
			return (this.refs == null) ? 0 : this.refs.size();
		}

		public java.util.Iterator<java.lang.Integer> getRefsIterator() {
			return (this.refs == null) ? null : this.refs.iterator();
		}

		public void addToRefs(int elem) {
			if (this.refs == null) {
				this.refs = new java.util.ArrayList<java.lang.Integer>();
			}
			this.refs.add(elem);
		}

		public java.util.List<java.lang.Integer> getRefs() {
			return this.refs;
		}

		public getInteger_args setRefs(java.util.List<java.lang.Integer> refs) {
			this.refs = refs;
			return this;
		}

		public void unsetRefs() {
			this.refs = null;
		}

		/**
		 * Returns true if field refs is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRefs() {
			return this.refs != null;
		}

		public void setRefsIsSet(boolean value) {
			if (!value) {
				this.refs = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REFS:
				if (value == null) {
					unsetRefs();
				} else {
					setRefs((java.util.List<java.lang.Integer>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REFS:
				return getRefs();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REFS:
				return isSetRefs();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getInteger_args)
				return this.equals((getInteger_args) that);
			return false;
		}

		public boolean equals(getInteger_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_refs = true && this.isSetRefs();
			boolean that_present_refs = true && that.isSetRefs();
			if (this_present_refs || that_present_refs) {
				if (!(this_present_refs && that_present_refs))
					return false;
				if (!this.refs.equals(that.refs))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRefs()) ? 131071 : 524287);
			if (isSetRefs())
				hashCode = hashCode * 8191 + refs.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getInteger_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRefs()).compareTo(other.isSetRefs());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRefs()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refs, other.refs);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getInteger_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("refs:");
			if (this.refs == null) {
				sb.append("null");
			} else {
				sb.append(this.refs);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getInteger_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getInteger_argsStandardScheme getScheme() {
				return new getInteger_argsStandardScheme();
			}
		}

		private static class getInteger_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getInteger_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getInteger_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REFS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
								struct.refs = new java.util.ArrayList<java.lang.Integer>(_list16.size);
								int _elem17;
								for (int _i18 = 0; _i18 < _list16.size; ++_i18) {
									_elem17 = iprot.readI32();
									struct.refs.add(_elem17);
								}
								iprot.readListEnd();
							}
							struct.setRefsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getInteger_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.refs != null) {
					oprot.writeFieldBegin(REFS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,
								struct.refs.size()));
						for (int _iter19 : struct.refs) {
							oprot.writeI32(_iter19);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getInteger_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getInteger_argsTupleScheme getScheme() {
				return new getInteger_argsTupleScheme();
			}
		}

		private static class getInteger_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInteger_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getInteger_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRefs()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRefs()) {
					{
						oprot.writeI32(struct.refs.size());
						for (int _iter20 : struct.refs) {
							oprot.writeI32(_iter20);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getInteger_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.I32, iprot.readI32());
						struct.refs = new java.util.ArrayList<java.lang.Integer>(_list21.size);
						int _elem22;
						for (int _i23 = 0; _i23 < _list21.size; ++_i23) {
							_elem22 = iprot.readI32();
							struct.refs.add(_elem22);
						}
					}
					struct.setRefsIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getInteger_result
			implements org.apache.thrift.TBase<getInteger_result, getInteger_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getInteger_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getInteger_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInteger_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInteger_resultTupleSchemeFactory();

		public java.util.List<java.lang.Integer> success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInteger_result.class, metaDataMap);
		}

		public getInteger_result() {
		}

		public getInteger_result(java.util.List<java.lang.Integer> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getInteger_result(getInteger_result other) {
			if (other.isSetSuccess()) {
				java.util.List<java.lang.Integer> __this__success = new java.util.ArrayList<java.lang.Integer>(
						other.success);
				this.success = __this__success;
			}
		}

		public getInteger_result deepCopy() {
			return new getInteger_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<java.lang.Integer> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(int elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<java.lang.Integer>();
			}
			this.success.add(elem);
		}

		public java.util.List<java.lang.Integer> getSuccess() {
			return this.success;
		}

		public getInteger_result setSuccess(java.util.List<java.lang.Integer> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.util.List<java.lang.Integer>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getInteger_result)
				return this.equals((getInteger_result) that);
			return false;
		}

		public boolean equals(getInteger_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getInteger_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getInteger_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getInteger_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getInteger_resultStandardScheme getScheme() {
				return new getInteger_resultStandardScheme();
			}
		}

		private static class getInteger_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getInteger_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getInteger_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<java.lang.Integer>(_list24.size);
								int _elem25;
								for (int _i26 = 0; _i26 < _list24.size; ++_i26) {
									_elem25 = iprot.readI32();
									struct.success.add(_elem25);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getInteger_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,
								struct.success.size()));
						for (int _iter27 : struct.success) {
							oprot.writeI32(_iter27);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getInteger_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getInteger_resultTupleScheme getScheme() {
				return new getInteger_resultTupleScheme();
			}
		}

		private static class getInteger_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getInteger_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getInteger_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (int _iter28 : struct.success) {
							oprot.writeI32(_iter28);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getInteger_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.I32, iprot.readI32());
						struct.success = new java.util.ArrayList<java.lang.Integer>(_list29.size);
						int _elem30;
						for (int _i31 = 0; _i31 < _list29.size; ++_i31) {
							_elem30 = iprot.readI32();
							struct.success.add(_elem30);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBoolean_args implements org.apache.thrift.TBase<getBoolean_args, getBoolean_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getBoolean_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBoolean_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REFS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"refs", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBoolean_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBoolean_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.List<java.lang.Integer> refs; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REFS((short) 2, "refs");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REFS
					return REFS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REFS, new org.apache.thrift.meta_data.FieldMetaData("refs",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBoolean_args.class, metaDataMap);
		}

		public getBoolean_args() {
		}

		public getBoolean_args(Instance c, java.util.List<java.lang.Integer> refs) {
			this();
			this.c = c;
			this.refs = refs;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBoolean_args(getBoolean_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRefs()) {
				java.util.List<java.lang.Integer> __this__refs = new java.util.ArrayList<java.lang.Integer>(other.refs);
				this.refs = __this__refs;
			}
		}

		public getBoolean_args deepCopy() {
			return new getBoolean_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.refs = null;
		}

		public Instance getC() {
			return this.c;
		}

		public getBoolean_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRefsSize() {
			return (this.refs == null) ? 0 : this.refs.size();
		}

		public java.util.Iterator<java.lang.Integer> getRefsIterator() {
			return (this.refs == null) ? null : this.refs.iterator();
		}

		public void addToRefs(int elem) {
			if (this.refs == null) {
				this.refs = new java.util.ArrayList<java.lang.Integer>();
			}
			this.refs.add(elem);
		}

		public java.util.List<java.lang.Integer> getRefs() {
			return this.refs;
		}

		public getBoolean_args setRefs(java.util.List<java.lang.Integer> refs) {
			this.refs = refs;
			return this;
		}

		public void unsetRefs() {
			this.refs = null;
		}

		/**
		 * Returns true if field refs is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRefs() {
			return this.refs != null;
		}

		public void setRefsIsSet(boolean value) {
			if (!value) {
				this.refs = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REFS:
				if (value == null) {
					unsetRefs();
				} else {
					setRefs((java.util.List<java.lang.Integer>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REFS:
				return getRefs();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REFS:
				return isSetRefs();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBoolean_args)
				return this.equals((getBoolean_args) that);
			return false;
		}

		public boolean equals(getBoolean_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_refs = true && this.isSetRefs();
			boolean that_present_refs = true && that.isSetRefs();
			if (this_present_refs || that_present_refs) {
				if (!(this_present_refs && that_present_refs))
					return false;
				if (!this.refs.equals(that.refs))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRefs()) ? 131071 : 524287);
			if (isSetRefs())
				hashCode = hashCode * 8191 + refs.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBoolean_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRefs()).compareTo(other.isSetRefs());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRefs()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refs, other.refs);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBoolean_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("refs:");
			if (this.refs == null) {
				sb.append("null");
			} else {
				sb.append(this.refs);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBoolean_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBoolean_argsStandardScheme getScheme() {
				return new getBoolean_argsStandardScheme();
			}
		}

		private static class getBoolean_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBoolean_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBoolean_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REFS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
								struct.refs = new java.util.ArrayList<java.lang.Integer>(_list32.size);
								int _elem33;
								for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
									_elem33 = iprot.readI32();
									struct.refs.add(_elem33);
								}
								iprot.readListEnd();
							}
							struct.setRefsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBoolean_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.refs != null) {
					oprot.writeFieldBegin(REFS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,
								struct.refs.size()));
						for (int _iter35 : struct.refs) {
							oprot.writeI32(_iter35);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBoolean_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBoolean_argsTupleScheme getScheme() {
				return new getBoolean_argsTupleScheme();
			}
		}

		private static class getBoolean_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBoolean_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBoolean_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRefs()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRefs()) {
					{
						oprot.writeI32(struct.refs.size());
						for (int _iter36 : struct.refs) {
							oprot.writeI32(_iter36);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBoolean_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.I32, iprot.readI32());
						struct.refs = new java.util.ArrayList<java.lang.Integer>(_list37.size);
						int _elem38;
						for (int _i39 = 0; _i39 < _list37.size; ++_i39) {
							_elem38 = iprot.readI32();
							struct.refs.add(_elem38);
						}
					}
					struct.setRefsIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBoolean_result
			implements org.apache.thrift.TBase<getBoolean_result, getBoolean_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getBoolean_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBoolean_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBoolean_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBoolean_resultTupleSchemeFactory();

		public java.util.List<java.lang.Boolean> success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.BOOL))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBoolean_result.class, metaDataMap);
		}

		public getBoolean_result() {
		}

		public getBoolean_result(java.util.List<java.lang.Boolean> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBoolean_result(getBoolean_result other) {
			if (other.isSetSuccess()) {
				java.util.List<java.lang.Boolean> __this__success = new java.util.ArrayList<java.lang.Boolean>(
						other.success);
				this.success = __this__success;
			}
		}

		public getBoolean_result deepCopy() {
			return new getBoolean_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<java.lang.Boolean> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(boolean elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<java.lang.Boolean>();
			}
			this.success.add(elem);
		}

		public java.util.List<java.lang.Boolean> getSuccess() {
			return this.success;
		}

		public getBoolean_result setSuccess(java.util.List<java.lang.Boolean> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.util.List<java.lang.Boolean>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBoolean_result)
				return this.equals((getBoolean_result) that);
			return false;
		}

		public boolean equals(getBoolean_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBoolean_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBoolean_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBoolean_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBoolean_resultStandardScheme getScheme() {
				return new getBoolean_resultStandardScheme();
			}
		}

		private static class getBoolean_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBoolean_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBoolean_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<java.lang.Boolean>(_list40.size);
								boolean _elem41;
								for (int _i42 = 0; _i42 < _list40.size; ++_i42) {
									_elem41 = iprot.readBool();
									struct.success.add(_elem41);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBoolean_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL,
								struct.success.size()));
						for (boolean _iter43 : struct.success) {
							oprot.writeBool(_iter43);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBoolean_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBoolean_resultTupleScheme getScheme() {
				return new getBoolean_resultTupleScheme();
			}
		}

		private static class getBoolean_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBoolean_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBoolean_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (boolean _iter44 : struct.success) {
							oprot.writeBool(_iter44);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBoolean_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
						struct.success = new java.util.ArrayList<java.lang.Boolean>(_list45.size);
						boolean _elem46;
						for (int _i47 = 0; _i47 < _list45.size; ++_i47) {
							_elem46 = iprot.readBool();
							struct.success.add(_elem46);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getString_args implements org.apache.thrift.TBase<getString_args, getString_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getString_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getString_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REFS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"refs", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getString_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getString_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.List<java.lang.Integer> refs; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REFS((short) 2, "refs");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REFS
					return REFS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REFS, new org.apache.thrift.meta_data.FieldMetaData("refs",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getString_args.class, metaDataMap);
		}

		public getString_args() {
		}

		public getString_args(Instance c, java.util.List<java.lang.Integer> refs) {
			this();
			this.c = c;
			this.refs = refs;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getString_args(getString_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRefs()) {
				java.util.List<java.lang.Integer> __this__refs = new java.util.ArrayList<java.lang.Integer>(other.refs);
				this.refs = __this__refs;
			}
		}

		public getString_args deepCopy() {
			return new getString_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.refs = null;
		}

		public Instance getC() {
			return this.c;
		}

		public getString_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRefsSize() {
			return (this.refs == null) ? 0 : this.refs.size();
		}

		public java.util.Iterator<java.lang.Integer> getRefsIterator() {
			return (this.refs == null) ? null : this.refs.iterator();
		}

		public void addToRefs(int elem) {
			if (this.refs == null) {
				this.refs = new java.util.ArrayList<java.lang.Integer>();
			}
			this.refs.add(elem);
		}

		public java.util.List<java.lang.Integer> getRefs() {
			return this.refs;
		}

		public getString_args setRefs(java.util.List<java.lang.Integer> refs) {
			this.refs = refs;
			return this;
		}

		public void unsetRefs() {
			this.refs = null;
		}

		/**
		 * Returns true if field refs is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRefs() {
			return this.refs != null;
		}

		public void setRefsIsSet(boolean value) {
			if (!value) {
				this.refs = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REFS:
				if (value == null) {
					unsetRefs();
				} else {
					setRefs((java.util.List<java.lang.Integer>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REFS:
				return getRefs();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REFS:
				return isSetRefs();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getString_args)
				return this.equals((getString_args) that);
			return false;
		}

		public boolean equals(getString_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_refs = true && this.isSetRefs();
			boolean that_present_refs = true && that.isSetRefs();
			if (this_present_refs || that_present_refs) {
				if (!(this_present_refs && that_present_refs))
					return false;
				if (!this.refs.equals(that.refs))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRefs()) ? 131071 : 524287);
			if (isSetRefs())
				hashCode = hashCode * 8191 + refs.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getString_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRefs()).compareTo(other.isSetRefs());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRefs()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refs, other.refs);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getString_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("refs:");
			if (this.refs == null) {
				sb.append("null");
			} else {
				sb.append(this.refs);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getString_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getString_argsStandardScheme getScheme() {
				return new getString_argsStandardScheme();
			}
		}

		private static class getString_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getString_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getString_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REFS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
								struct.refs = new java.util.ArrayList<java.lang.Integer>(_list48.size);
								int _elem49;
								for (int _i50 = 0; _i50 < _list48.size; ++_i50) {
									_elem49 = iprot.readI32();
									struct.refs.add(_elem49);
								}
								iprot.readListEnd();
							}
							struct.setRefsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getString_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.refs != null) {
					oprot.writeFieldBegin(REFS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,
								struct.refs.size()));
						for (int _iter51 : struct.refs) {
							oprot.writeI32(_iter51);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getString_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getString_argsTupleScheme getScheme() {
				return new getString_argsTupleScheme();
			}
		}

		private static class getString_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getString_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getString_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRefs()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRefs()) {
					{
						oprot.writeI32(struct.refs.size());
						for (int _iter52 : struct.refs) {
							oprot.writeI32(_iter52);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getString_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.I32, iprot.readI32());
						struct.refs = new java.util.ArrayList<java.lang.Integer>(_list53.size);
						int _elem54;
						for (int _i55 = 0; _i55 < _list53.size; ++_i55) {
							_elem54 = iprot.readI32();
							struct.refs.add(_elem54);
						}
					}
					struct.setRefsIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getString_result implements org.apache.thrift.TBase<getString_result, getString_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getString_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getString_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getString_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getString_resultTupleSchemeFactory();

		public java.util.List<java.lang.String> success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getString_result.class, metaDataMap);
		}

		public getString_result() {
		}

		public getString_result(java.util.List<java.lang.String> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getString_result(getString_result other) {
			if (other.isSetSuccess()) {
				java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(
						other.success);
				this.success = __this__success;
			}
		}

		public getString_result deepCopy() {
			return new getString_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<java.lang.String> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(java.lang.String elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<java.lang.String>();
			}
			this.success.add(elem);
		}

		public java.util.List<java.lang.String> getSuccess() {
			return this.success;
		}

		public getString_result setSuccess(java.util.List<java.lang.String> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getString_result)
				return this.equals((getString_result) that);
			return false;
		}

		public boolean equals(getString_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getString_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getString_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getString_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getString_resultStandardScheme getScheme() {
				return new getString_resultStandardScheme();
			}
		}

		private static class getString_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getString_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getString_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<java.lang.String>(_list56.size);
								java.lang.String _elem57;
								for (int _i58 = 0; _i58 < _list56.size; ++_i58) {
									_elem57 = iprot.readString();
									struct.success.add(_elem57);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getString_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.success.size()));
						for (java.lang.String _iter59 : struct.success) {
							oprot.writeString(_iter59);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getString_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getString_resultTupleScheme getScheme() {
				return new getString_resultTupleScheme();
			}
		}

		private static class getString_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getString_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getString_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (java.lang.String _iter60 : struct.success) {
							oprot.writeString(_iter60);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getString_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.success = new java.util.ArrayList<java.lang.String>(_list61.size);
						java.lang.String _elem62;
						for (int _i63 = 0; _i63 < _list61.size; ++_i63) {
							_elem62 = iprot.readString();
							struct.success.add(_elem62);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setReal_args implements org.apache.thrift.TBase<setReal_args, setReal_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setReal_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setReal_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REF_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ref_values", org.apache.thrift.protocol.TType.MAP, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setReal_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setReal_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.Map<java.lang.Integer, java.lang.Double> ref_values; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REF_VALUES((short) 2, "ref_values");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REF_VALUES
					return REF_VALUES;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REF_VALUES, new org.apache.thrift.meta_data.FieldMetaData("ref_values",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.DOUBLE))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setReal_args.class, metaDataMap);
		}

		public setReal_args() {
		}

		public setReal_args(Instance c, java.util.Map<java.lang.Integer, java.lang.Double> ref_values) {
			this();
			this.c = c;
			this.ref_values = ref_values;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setReal_args(setReal_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRef_values()) {
				java.util.Map<java.lang.Integer, java.lang.Double> __this__ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>(
						other.ref_values);
				this.ref_values = __this__ref_values;
			}
		}

		public setReal_args deepCopy() {
			return new setReal_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.ref_values = null;
		}

		public Instance getC() {
			return this.c;
		}

		public setReal_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRef_valuesSize() {
			return (this.ref_values == null) ? 0 : this.ref_values.size();
		}

		public void putToRef_values(int key, double val) {
			if (this.ref_values == null) {
				this.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>();
			}
			this.ref_values.put(key, val);
		}

		public java.util.Map<java.lang.Integer, java.lang.Double> getRef_values() {
			return this.ref_values;
		}

		public setReal_args setRef_values(java.util.Map<java.lang.Integer, java.lang.Double> ref_values) {
			this.ref_values = ref_values;
			return this;
		}

		public void unsetRef_values() {
			this.ref_values = null;
		}

		/**
		 * Returns true if field ref_values is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRef_values() {
			return this.ref_values != null;
		}

		public void setRef_valuesIsSet(boolean value) {
			if (!value) {
				this.ref_values = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REF_VALUES:
				if (value == null) {
					unsetRef_values();
				} else {
					setRef_values((java.util.Map<java.lang.Integer, java.lang.Double>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REF_VALUES:
				return getRef_values();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REF_VALUES:
				return isSetRef_values();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setReal_args)
				return this.equals((setReal_args) that);
			return false;
		}

		public boolean equals(setReal_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_ref_values = true && this.isSetRef_values();
			boolean that_present_ref_values = true && that.isSetRef_values();
			if (this_present_ref_values || that_present_ref_values) {
				if (!(this_present_ref_values && that_present_ref_values))
					return false;
				if (!this.ref_values.equals(that.ref_values))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRef_values()) ? 131071 : 524287);
			if (isSetRef_values())
				hashCode = hashCode * 8191 + ref_values.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setReal_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRef_values()).compareTo(other.isSetRef_values());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRef_values()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_values, other.ref_values);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setReal_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ref_values:");
			if (this.ref_values == null) {
				sb.append("null");
			} else {
				sb.append(this.ref_values);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setReal_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setReal_argsStandardScheme getScheme() {
				return new setReal_argsStandardScheme();
			}
		}

		private static class setReal_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setReal_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setReal_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REF_VALUES
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
								struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>(
										2 * _map64.size);
								int _key65;
								double _val66;
								for (int _i67 = 0; _i67 < _map64.size; ++_i67) {
									_key65 = iprot.readI32();
									_val66 = iprot.readDouble();
									struct.ref_values.put(_key65, _val66);
								}
								iprot.readMapEnd();
							}
							struct.setRef_valuesIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setReal_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.ref_values != null) {
					oprot.writeFieldBegin(REF_VALUES_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,
								org.apache.thrift.protocol.TType.DOUBLE, struct.ref_values.size()));
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter68 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter68.getKey());
							oprot.writeDouble(_iter68.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setReal_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setReal_argsTupleScheme getScheme() {
				return new setReal_argsTupleScheme();
			}
		}

		private static class setReal_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setReal_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setReal_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRef_values()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRef_values()) {
					{
						oprot.writeI32(struct.ref_values.size());
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter69 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter69.getKey());
							oprot.writeDouble(_iter69.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setReal_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE,
								iprot.readI32());
						struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>(2 * _map70.size);
						int _key71;
						double _val72;
						for (int _i73 = 0; _i73 < _map70.size; ++_i73) {
							_key71 = iprot.readI32();
							_val72 = iprot.readDouble();
							struct.ref_values.put(_key71, _val72);
						}
					}
					struct.setRef_valuesIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setReal_result implements org.apache.thrift.TBase<setReal_result, setReal_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setReal_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setReal_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setReal_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setReal_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setReal_result.class, metaDataMap);
		}

		public setReal_result() {
		}

		public setReal_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setReal_result(setReal_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public setReal_result deepCopy() {
			return new setReal_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public setReal_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setReal_result)
				return this.equals((setReal_result) that);
			return false;
		}

		public boolean equals(setReal_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(setReal_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setReal_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setReal_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setReal_resultStandardScheme getScheme() {
				return new setReal_resultStandardScheme();
			}
		}

		private static class setReal_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setReal_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setReal_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setReal_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setReal_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setReal_resultTupleScheme getScheme() {
				return new setReal_resultTupleScheme();
			}
		}

		private static class setReal_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setReal_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setReal_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setReal_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setInteger_args implements org.apache.thrift.TBase<setInteger_args, setInteger_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setInteger_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setInteger_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REF_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ref_values", org.apache.thrift.protocol.TType.MAP, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setInteger_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setInteger_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.Map<java.lang.Integer, java.lang.Integer> ref_values; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REF_VALUES((short) 2, "ref_values");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REF_VALUES
					return REF_VALUES;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REF_VALUES, new org.apache.thrift.meta_data.FieldMetaData("ref_values",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setInteger_args.class, metaDataMap);
		}

		public setInteger_args() {
		}

		public setInteger_args(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_values) {
			this();
			this.c = c;
			this.ref_values = ref_values;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setInteger_args(setInteger_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRef_values()) {
				java.util.Map<java.lang.Integer, java.lang.Integer> __this__ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(
						other.ref_values);
				this.ref_values = __this__ref_values;
			}
		}

		public setInteger_args deepCopy() {
			return new setInteger_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.ref_values = null;
		}

		public Instance getC() {
			return this.c;
		}

		public setInteger_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRef_valuesSize() {
			return (this.ref_values == null) ? 0 : this.ref_values.size();
		}

		public void putToRef_values(int key, int val) {
			if (this.ref_values == null) {
				this.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Integer>();
			}
			this.ref_values.put(key, val);
		}

		public java.util.Map<java.lang.Integer, java.lang.Integer> getRef_values() {
			return this.ref_values;
		}

		public setInteger_args setRef_values(java.util.Map<java.lang.Integer, java.lang.Integer> ref_values) {
			this.ref_values = ref_values;
			return this;
		}

		public void unsetRef_values() {
			this.ref_values = null;
		}

		/**
		 * Returns true if field ref_values is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRef_values() {
			return this.ref_values != null;
		}

		public void setRef_valuesIsSet(boolean value) {
			if (!value) {
				this.ref_values = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REF_VALUES:
				if (value == null) {
					unsetRef_values();
				} else {
					setRef_values((java.util.Map<java.lang.Integer, java.lang.Integer>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REF_VALUES:
				return getRef_values();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REF_VALUES:
				return isSetRef_values();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setInteger_args)
				return this.equals((setInteger_args) that);
			return false;
		}

		public boolean equals(setInteger_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_ref_values = true && this.isSetRef_values();
			boolean that_present_ref_values = true && that.isSetRef_values();
			if (this_present_ref_values || that_present_ref_values) {
				if (!(this_present_ref_values && that_present_ref_values))
					return false;
				if (!this.ref_values.equals(that.ref_values))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRef_values()) ? 131071 : 524287);
			if (isSetRef_values())
				hashCode = hashCode * 8191 + ref_values.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setInteger_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRef_values()).compareTo(other.isSetRef_values());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRef_values()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_values, other.ref_values);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setInteger_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ref_values:");
			if (this.ref_values == null) {
				sb.append("null");
			} else {
				sb.append(this.ref_values);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setInteger_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setInteger_argsStandardScheme getScheme() {
				return new setInteger_argsStandardScheme();
			}
		}

		private static class setInteger_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setInteger_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setInteger_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REF_VALUES
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
								struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(
										2 * _map74.size);
								int _key75;
								int _val76;
								for (int _i77 = 0; _i77 < _map74.size; ++_i77) {
									_key75 = iprot.readI32();
									_val76 = iprot.readI32();
									struct.ref_values.put(_key75, _val76);
								}
								iprot.readMapEnd();
							}
							struct.setRef_valuesIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setInteger_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.ref_values != null) {
					oprot.writeFieldBegin(REF_VALUES_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,
								org.apache.thrift.protocol.TType.I32, struct.ref_values.size()));
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter78 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter78.getKey());
							oprot.writeI32(_iter78.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setInteger_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setInteger_argsTupleScheme getScheme() {
				return new setInteger_argsTupleScheme();
			}
		}

		private static class setInteger_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setInteger_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setInteger_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRef_values()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRef_values()) {
					{
						oprot.writeI32(struct.ref_values.size());
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter79 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter79.getKey());
							oprot.writeI32(_iter79.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setInteger_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32,
								iprot.readI32());
						struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(
								2 * _map80.size);
						int _key81;
						int _val82;
						for (int _i83 = 0; _i83 < _map80.size; ++_i83) {
							_key81 = iprot.readI32();
							_val82 = iprot.readI32();
							struct.ref_values.put(_key81, _val82);
						}
					}
					struct.setRef_valuesIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setInteger_result
			implements org.apache.thrift.TBase<setInteger_result, setInteger_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<setInteger_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setInteger_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setInteger_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setInteger_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setInteger_result.class, metaDataMap);
		}

		public setInteger_result() {
		}

		public setInteger_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setInteger_result(setInteger_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public setInteger_result deepCopy() {
			return new setInteger_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public setInteger_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setInteger_result)
				return this.equals((setInteger_result) that);
			return false;
		}

		public boolean equals(setInteger_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(setInteger_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setInteger_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setInteger_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setInteger_resultStandardScheme getScheme() {
				return new setInteger_resultStandardScheme();
			}
		}

		private static class setInteger_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setInteger_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setInteger_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setInteger_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setInteger_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setInteger_resultTupleScheme getScheme() {
				return new setInteger_resultTupleScheme();
			}
		}

		private static class setInteger_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setInteger_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setInteger_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setInteger_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setBoolean_args implements org.apache.thrift.TBase<setBoolean_args, setBoolean_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setBoolean_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setBoolean_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REF_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ref_values", org.apache.thrift.protocol.TType.MAP, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setBoolean_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setBoolean_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REF_VALUES((short) 2, "ref_values");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REF_VALUES
					return REF_VALUES;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REF_VALUES, new org.apache.thrift.meta_data.FieldMetaData("ref_values",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBoolean_args.class, metaDataMap);
		}

		public setBoolean_args() {
		}

		public setBoolean_args(Instance c, java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values) {
			this();
			this.c = c;
			this.ref_values = ref_values;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setBoolean_args(setBoolean_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRef_values()) {
				java.util.Map<java.lang.Integer, java.lang.Boolean> __this__ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Boolean>(
						other.ref_values);
				this.ref_values = __this__ref_values;
			}
		}

		public setBoolean_args deepCopy() {
			return new setBoolean_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.ref_values = null;
		}

		public Instance getC() {
			return this.c;
		}

		public setBoolean_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRef_valuesSize() {
			return (this.ref_values == null) ? 0 : this.ref_values.size();
		}

		public void putToRef_values(int key, boolean val) {
			if (this.ref_values == null) {
				this.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Boolean>();
			}
			this.ref_values.put(key, val);
		}

		public java.util.Map<java.lang.Integer, java.lang.Boolean> getRef_values() {
			return this.ref_values;
		}

		public setBoolean_args setRef_values(java.util.Map<java.lang.Integer, java.lang.Boolean> ref_values) {
			this.ref_values = ref_values;
			return this;
		}

		public void unsetRef_values() {
			this.ref_values = null;
		}

		/**
		 * Returns true if field ref_values is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRef_values() {
			return this.ref_values != null;
		}

		public void setRef_valuesIsSet(boolean value) {
			if (!value) {
				this.ref_values = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REF_VALUES:
				if (value == null) {
					unsetRef_values();
				} else {
					setRef_values((java.util.Map<java.lang.Integer, java.lang.Boolean>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REF_VALUES:
				return getRef_values();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REF_VALUES:
				return isSetRef_values();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setBoolean_args)
				return this.equals((setBoolean_args) that);
			return false;
		}

		public boolean equals(setBoolean_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_ref_values = true && this.isSetRef_values();
			boolean that_present_ref_values = true && that.isSetRef_values();
			if (this_present_ref_values || that_present_ref_values) {
				if (!(this_present_ref_values && that_present_ref_values))
					return false;
				if (!this.ref_values.equals(that.ref_values))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRef_values()) ? 131071 : 524287);
			if (isSetRef_values())
				hashCode = hashCode * 8191 + ref_values.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setBoolean_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRef_values()).compareTo(other.isSetRef_values());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRef_values()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_values, other.ref_values);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setBoolean_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ref_values:");
			if (this.ref_values == null) {
				sb.append("null");
			} else {
				sb.append(this.ref_values);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setBoolean_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setBoolean_argsStandardScheme getScheme() {
				return new setBoolean_argsStandardScheme();
			}
		}

		private static class setBoolean_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setBoolean_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setBoolean_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REF_VALUES
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
								struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Boolean>(
										2 * _map84.size);
								int _key85;
								boolean _val86;
								for (int _i87 = 0; _i87 < _map84.size; ++_i87) {
									_key85 = iprot.readI32();
									_val86 = iprot.readBool();
									struct.ref_values.put(_key85, _val86);
								}
								iprot.readMapEnd();
							}
							struct.setRef_valuesIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setBoolean_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.ref_values != null) {
					oprot.writeFieldBegin(REF_VALUES_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,
								org.apache.thrift.protocol.TType.BOOL, struct.ref_values.size()));
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Boolean> _iter88 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter88.getKey());
							oprot.writeBool(_iter88.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setBoolean_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setBoolean_argsTupleScheme getScheme() {
				return new setBoolean_argsTupleScheme();
			}
		}

		private static class setBoolean_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setBoolean_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setBoolean_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRef_values()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRef_values()) {
					{
						oprot.writeI32(struct.ref_values.size());
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Boolean> _iter89 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter89.getKey());
							oprot.writeBool(_iter89.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setBoolean_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.BOOL,
								iprot.readI32());
						struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Boolean>(
								2 * _map90.size);
						int _key91;
						boolean _val92;
						for (int _i93 = 0; _i93 < _map90.size; ++_i93) {
							_key91 = iprot.readI32();
							_val92 = iprot.readBool();
							struct.ref_values.put(_key91, _val92);
						}
					}
					struct.setRef_valuesIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setBoolean_result
			implements org.apache.thrift.TBase<setBoolean_result, setBoolean_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<setBoolean_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setBoolean_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setBoolean_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setBoolean_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBoolean_result.class, metaDataMap);
		}

		public setBoolean_result() {
		}

		public setBoolean_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setBoolean_result(setBoolean_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public setBoolean_result deepCopy() {
			return new setBoolean_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public setBoolean_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setBoolean_result)
				return this.equals((setBoolean_result) that);
			return false;
		}

		public boolean equals(setBoolean_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(setBoolean_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setBoolean_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setBoolean_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setBoolean_resultStandardScheme getScheme() {
				return new setBoolean_resultStandardScheme();
			}
		}

		private static class setBoolean_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setBoolean_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setBoolean_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setBoolean_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setBoolean_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setBoolean_resultTupleScheme getScheme() {
				return new setBoolean_resultTupleScheme();
			}
		}

		private static class setBoolean_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setBoolean_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setBoolean_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setBoolean_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setString_args implements org.apache.thrift.TBase<setString_args, setString_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setString_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setString_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REF_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ref_values", org.apache.thrift.protocol.TType.MAP, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setString_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setString_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.Map<java.lang.Integer, java.lang.String> ref_values; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REF_VALUES((short) 2, "ref_values");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REF_VALUES
					return REF_VALUES;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REF_VALUES, new org.apache.thrift.meta_data.FieldMetaData("ref_values",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setString_args.class, metaDataMap);
		}

		public setString_args() {
		}

		public setString_args(Instance c, java.util.Map<java.lang.Integer, java.lang.String> ref_values) {
			this();
			this.c = c;
			this.ref_values = ref_values;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setString_args(setString_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRef_values()) {
				java.util.Map<java.lang.Integer, java.lang.String> __this__ref_values = new java.util.HashMap<java.lang.Integer, java.lang.String>(
						other.ref_values);
				this.ref_values = __this__ref_values;
			}
		}

		public setString_args deepCopy() {
			return new setString_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.ref_values = null;
		}

		public Instance getC() {
			return this.c;
		}

		public setString_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRef_valuesSize() {
			return (this.ref_values == null) ? 0 : this.ref_values.size();
		}

		public void putToRef_values(int key, java.lang.String val) {
			if (this.ref_values == null) {
				this.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.String>();
			}
			this.ref_values.put(key, val);
		}

		public java.util.Map<java.lang.Integer, java.lang.String> getRef_values() {
			return this.ref_values;
		}

		public setString_args setRef_values(java.util.Map<java.lang.Integer, java.lang.String> ref_values) {
			this.ref_values = ref_values;
			return this;
		}

		public void unsetRef_values() {
			this.ref_values = null;
		}

		/**
		 * Returns true if field ref_values is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRef_values() {
			return this.ref_values != null;
		}

		public void setRef_valuesIsSet(boolean value) {
			if (!value) {
				this.ref_values = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REF_VALUES:
				if (value == null) {
					unsetRef_values();
				} else {
					setRef_values((java.util.Map<java.lang.Integer, java.lang.String>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REF_VALUES:
				return getRef_values();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REF_VALUES:
				return isSetRef_values();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setString_args)
				return this.equals((setString_args) that);
			return false;
		}

		public boolean equals(setString_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_ref_values = true && this.isSetRef_values();
			boolean that_present_ref_values = true && that.isSetRef_values();
			if (this_present_ref_values || that_present_ref_values) {
				if (!(this_present_ref_values && that_present_ref_values))
					return false;
				if (!this.ref_values.equals(that.ref_values))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRef_values()) ? 131071 : 524287);
			if (isSetRef_values())
				hashCode = hashCode * 8191 + ref_values.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setString_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRef_values()).compareTo(other.isSetRef_values());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRef_values()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_values, other.ref_values);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setString_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ref_values:");
			if (this.ref_values == null) {
				sb.append("null");
			} else {
				sb.append(this.ref_values);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setString_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setString_argsStandardScheme getScheme() {
				return new setString_argsStandardScheme();
			}
		}

		private static class setString_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setString_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setString_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REF_VALUES
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map94 = iprot.readMapBegin();
								struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.String>(
										2 * _map94.size);
								int _key95;
								java.lang.String _val96;
								for (int _i97 = 0; _i97 < _map94.size; ++_i97) {
									_key95 = iprot.readI32();
									_val96 = iprot.readString();
									struct.ref_values.put(_key95, _val96);
								}
								iprot.readMapEnd();
							}
							struct.setRef_valuesIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setString_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.ref_values != null) {
					oprot.writeFieldBegin(REF_VALUES_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,
								org.apache.thrift.protocol.TType.STRING, struct.ref_values.size()));
						for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter98 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter98.getKey());
							oprot.writeString(_iter98.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setString_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setString_argsTupleScheme getScheme() {
				return new setString_argsTupleScheme();
			}
		}

		private static class setString_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setString_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setString_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRef_values()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRef_values()) {
					{
						oprot.writeI32(struct.ref_values.size());
						for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter99 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter99.getKey());
							oprot.writeString(_iter99.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setString_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING,
								iprot.readI32());
						struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.String>(
								2 * _map100.size);
						int _key101;
						java.lang.String _val102;
						for (int _i103 = 0; _i103 < _map100.size; ++_i103) {
							_key101 = iprot.readI32();
							_val102 = iprot.readString();
							struct.ref_values.put(_key101, _val102);
						}
					}
					struct.setRef_valuesIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setString_result implements org.apache.thrift.TBase<setString_result, setString_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setString_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setString_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setString_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setString_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setString_result.class, metaDataMap);
		}

		public setString_result() {
		}

		public setString_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setString_result(setString_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public setString_result deepCopy() {
			return new setString_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public setString_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setString_result)
				return this.equals((setString_result) that);
			return false;
		}

		public boolean equals(setString_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(setString_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setString_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setString_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setString_resultStandardScheme getScheme() {
				return new setString_resultStandardScheme();
			}
		}

		private static class setString_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setString_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setString_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setString_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setString_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setString_resultTupleScheme getScheme() {
				return new setString_resultTupleScheme();
			}
		}

		private static class setString_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setString_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setString_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setString_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setRealInputDerivatives_args
			implements org.apache.thrift.TBase<setRealInputDerivatives_args, setRealInputDerivatives_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setRealInputDerivatives_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRealInputDerivatives_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REF_ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ref_orders", org.apache.thrift.protocol.TType.MAP, (short) 2);
		private static final org.apache.thrift.protocol.TField REF_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ref_values", org.apache.thrift.protocol.TType.MAP, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRealInputDerivatives_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRealInputDerivatives_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders; // required
		public java.util.Map<java.lang.Integer, java.lang.Double> ref_values; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REF_ORDERS((short) 2, "ref_orders"), REF_VALUES((short) 3, "ref_values");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REF_ORDERS
					return REF_ORDERS;
				case 3: // REF_VALUES
					return REF_VALUES;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REF_ORDERS, new org.apache.thrift.meta_data.FieldMetaData("ref_orders",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
			tmpMap.put(_Fields.REF_VALUES, new org.apache.thrift.meta_data.FieldMetaData("ref_values",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.DOUBLE))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRealInputDerivatives_args.class,
					metaDataMap);
		}

		public setRealInputDerivatives_args() {
		}

		public setRealInputDerivatives_args(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) {
			this();
			this.c = c;
			this.ref_orders = ref_orders;
			this.ref_values = ref_values;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRealInputDerivatives_args(setRealInputDerivatives_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRef_orders()) {
				java.util.Map<java.lang.Integer, java.lang.Integer> __this__ref_orders = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(
						other.ref_orders);
				this.ref_orders = __this__ref_orders;
			}
			if (other.isSetRef_values()) {
				java.util.Map<java.lang.Integer, java.lang.Double> __this__ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>(
						other.ref_values);
				this.ref_values = __this__ref_values;
			}
		}

		public setRealInputDerivatives_args deepCopy() {
			return new setRealInputDerivatives_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.ref_orders = null;
			this.ref_values = null;
		}

		public Instance getC() {
			return this.c;
		}

		public setRealInputDerivatives_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRef_ordersSize() {
			return (this.ref_orders == null) ? 0 : this.ref_orders.size();
		}

		public void putToRef_orders(int key, int val) {
			if (this.ref_orders == null) {
				this.ref_orders = new java.util.HashMap<java.lang.Integer, java.lang.Integer>();
			}
			this.ref_orders.put(key, val);
		}

		public java.util.Map<java.lang.Integer, java.lang.Integer> getRef_orders() {
			return this.ref_orders;
		}

		public setRealInputDerivatives_args setRef_orders(
				java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders) {
			this.ref_orders = ref_orders;
			return this;
		}

		public void unsetRef_orders() {
			this.ref_orders = null;
		}

		/**
		 * Returns true if field ref_orders is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRef_orders() {
			return this.ref_orders != null;
		}

		public void setRef_ordersIsSet(boolean value) {
			if (!value) {
				this.ref_orders = null;
			}
		}

		public int getRef_valuesSize() {
			return (this.ref_values == null) ? 0 : this.ref_values.size();
		}

		public void putToRef_values(int key, double val) {
			if (this.ref_values == null) {
				this.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>();
			}
			this.ref_values.put(key, val);
		}

		public java.util.Map<java.lang.Integer, java.lang.Double> getRef_values() {
			return this.ref_values;
		}

		public setRealInputDerivatives_args setRef_values(
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) {
			this.ref_values = ref_values;
			return this;
		}

		public void unsetRef_values() {
			this.ref_values = null;
		}

		/**
		 * Returns true if field ref_values is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRef_values() {
			return this.ref_values != null;
		}

		public void setRef_valuesIsSet(boolean value) {
			if (!value) {
				this.ref_values = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REF_ORDERS:
				if (value == null) {
					unsetRef_orders();
				} else {
					setRef_orders((java.util.Map<java.lang.Integer, java.lang.Integer>) value);
				}
				break;

			case REF_VALUES:
				if (value == null) {
					unsetRef_values();
				} else {
					setRef_values((java.util.Map<java.lang.Integer, java.lang.Double>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REF_ORDERS:
				return getRef_orders();

			case REF_VALUES:
				return getRef_values();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REF_ORDERS:
				return isSetRef_orders();
			case REF_VALUES:
				return isSetRef_values();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setRealInputDerivatives_args)
				return this.equals((setRealInputDerivatives_args) that);
			return false;
		}

		public boolean equals(setRealInputDerivatives_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_ref_orders = true && this.isSetRef_orders();
			boolean that_present_ref_orders = true && that.isSetRef_orders();
			if (this_present_ref_orders || that_present_ref_orders) {
				if (!(this_present_ref_orders && that_present_ref_orders))
					return false;
				if (!this.ref_orders.equals(that.ref_orders))
					return false;
			}

			boolean this_present_ref_values = true && this.isSetRef_values();
			boolean that_present_ref_values = true && that.isSetRef_values();
			if (this_present_ref_values || that_present_ref_values) {
				if (!(this_present_ref_values && that_present_ref_values))
					return false;
				if (!this.ref_values.equals(that.ref_values))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRef_orders()) ? 131071 : 524287);
			if (isSetRef_orders())
				hashCode = hashCode * 8191 + ref_orders.hashCode();

			hashCode = hashCode * 8191 + ((isSetRef_values()) ? 131071 : 524287);
			if (isSetRef_values())
				hashCode = hashCode * 8191 + ref_values.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setRealInputDerivatives_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRef_orders()).compareTo(other.isSetRef_orders());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRef_orders()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_orders, other.ref_orders);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRef_values()).compareTo(other.isSetRef_values());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRef_values()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_values, other.ref_values);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setRealInputDerivatives_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ref_orders:");
			if (this.ref_orders == null) {
				sb.append("null");
			} else {
				sb.append(this.ref_orders);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ref_values:");
			if (this.ref_values == null) {
				sb.append("null");
			} else {
				sb.append(this.ref_values);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRealInputDerivatives_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setRealInputDerivatives_argsStandardScheme getScheme() {
				return new setRealInputDerivatives_argsStandardScheme();
			}
		}

		private static class setRealInputDerivatives_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setRealInputDerivatives_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRealInputDerivatives_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REF_ORDERS
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map104 = iprot.readMapBegin();
								struct.ref_orders = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(
										2 * _map104.size);
								int _key105;
								int _val106;
								for (int _i107 = 0; _i107 < _map104.size; ++_i107) {
									_key105 = iprot.readI32();
									_val106 = iprot.readI32();
									struct.ref_orders.put(_key105, _val106);
								}
								iprot.readMapEnd();
							}
							struct.setRef_ordersIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // REF_VALUES
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map108 = iprot.readMapBegin();
								struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>(
										2 * _map108.size);
								int _key109;
								double _val110;
								for (int _i111 = 0; _i111 < _map108.size; ++_i111) {
									_key109 = iprot.readI32();
									_val110 = iprot.readDouble();
									struct.ref_values.put(_key109, _val110);
								}
								iprot.readMapEnd();
							}
							struct.setRef_valuesIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRealInputDerivatives_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.ref_orders != null) {
					oprot.writeFieldBegin(REF_ORDERS_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,
								org.apache.thrift.protocol.TType.I32, struct.ref_orders.size()));
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter112 : struct.ref_orders
								.entrySet()) {
							oprot.writeI32(_iter112.getKey());
							oprot.writeI32(_iter112.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.ref_values != null) {
					oprot.writeFieldBegin(REF_VALUES_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,
								org.apache.thrift.protocol.TType.DOUBLE, struct.ref_values.size()));
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter113 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter113.getKey());
							oprot.writeDouble(_iter113.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRealInputDerivatives_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setRealInputDerivatives_argsTupleScheme getScheme() {
				return new setRealInputDerivatives_argsTupleScheme();
			}
		}

		private static class setRealInputDerivatives_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setRealInputDerivatives_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRealInputDerivatives_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRef_orders()) {
					optionals.set(1);
				}
				if (struct.isSetRef_values()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRef_orders()) {
					{
						oprot.writeI32(struct.ref_orders.size());
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter114 : struct.ref_orders
								.entrySet()) {
							oprot.writeI32(_iter114.getKey());
							oprot.writeI32(_iter114.getValue());
						}
					}
				}
				if (struct.isSetRef_values()) {
					{
						oprot.writeI32(struct.ref_values.size());
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter115 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter115.getKey());
							oprot.writeDouble(_iter115.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRealInputDerivatives_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TMap _map116 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32,
								iprot.readI32());
						struct.ref_orders = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(
								2 * _map116.size);
						int _key117;
						int _val118;
						for (int _i119 = 0; _i119 < _map116.size; ++_i119) {
							_key117 = iprot.readI32();
							_val118 = iprot.readI32();
							struct.ref_orders.put(_key117, _val118);
						}
					}
					struct.setRef_ordersIsSet(true);
				}
				if (incoming.get(2)) {
					{
						org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE,
								iprot.readI32());
						struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>(
								2 * _map120.size);
						int _key121;
						double _val122;
						for (int _i123 = 0; _i123 < _map120.size; ++_i123) {
							_key121 = iprot.readI32();
							_val122 = iprot.readDouble();
							struct.ref_values.put(_key121, _val122);
						}
					}
					struct.setRef_valuesIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setRealInputDerivatives_result
			implements org.apache.thrift.TBase<setRealInputDerivatives_result, setRealInputDerivatives_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setRealInputDerivatives_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRealInputDerivatives_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRealInputDerivatives_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRealInputDerivatives_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRealInputDerivatives_result.class,
					metaDataMap);
		}

		public setRealInputDerivatives_result() {
		}

		public setRealInputDerivatives_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRealInputDerivatives_result(setRealInputDerivatives_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public setRealInputDerivatives_result deepCopy() {
			return new setRealInputDerivatives_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public setRealInputDerivatives_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setRealInputDerivatives_result)
				return this.equals((setRealInputDerivatives_result) that);
			return false;
		}

		public boolean equals(setRealInputDerivatives_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(setRealInputDerivatives_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setRealInputDerivatives_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRealInputDerivatives_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setRealInputDerivatives_resultStandardScheme getScheme() {
				return new setRealInputDerivatives_resultStandardScheme();
			}
		}

		private static class setRealInputDerivatives_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setRealInputDerivatives_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRealInputDerivatives_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRealInputDerivatives_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRealInputDerivatives_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setRealInputDerivatives_resultTupleScheme getScheme() {
				return new setRealInputDerivatives_resultTupleScheme();
			}
		}

		private static class setRealInputDerivatives_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setRealInputDerivatives_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRealInputDerivatives_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRealInputDerivatives_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setRealOutputDerivatives_args
			implements org.apache.thrift.TBase<setRealOutputDerivatives_args, setRealOutputDerivatives_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setRealOutputDerivatives_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRealOutputDerivatives_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField REF_ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ref_orders", org.apache.thrift.protocol.TType.MAP, (short) 2);
		private static final org.apache.thrift.protocol.TField REF_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ref_values", org.apache.thrift.protocol.TType.MAP, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRealOutputDerivatives_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRealOutputDerivatives_argsTupleSchemeFactory();

		public Instance c; // required
		public java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders; // required
		public java.util.Map<java.lang.Integer, java.lang.Double> ref_values; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), REF_ORDERS((short) 2, "ref_orders"), REF_VALUES((short) 3, "ref_values");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // REF_ORDERS
					return REF_ORDERS;
				case 3: // REF_VALUES
					return REF_VALUES;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.REF_ORDERS, new org.apache.thrift.meta_data.FieldMetaData("ref_orders",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
			tmpMap.put(_Fields.REF_VALUES, new org.apache.thrift.meta_data.FieldMetaData("ref_values",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.DOUBLE))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRealOutputDerivatives_args.class,
					metaDataMap);
		}

		public setRealOutputDerivatives_args() {
		}

		public setRealOutputDerivatives_args(Instance c, java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders,
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) {
			this();
			this.c = c;
			this.ref_orders = ref_orders;
			this.ref_values = ref_values;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRealOutputDerivatives_args(setRealOutputDerivatives_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetRef_orders()) {
				java.util.Map<java.lang.Integer, java.lang.Integer> __this__ref_orders = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(
						other.ref_orders);
				this.ref_orders = __this__ref_orders;
			}
			if (other.isSetRef_values()) {
				java.util.Map<java.lang.Integer, java.lang.Double> __this__ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>(
						other.ref_values);
				this.ref_values = __this__ref_values;
			}
		}

		public setRealOutputDerivatives_args deepCopy() {
			return new setRealOutputDerivatives_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.ref_orders = null;
			this.ref_values = null;
		}

		public Instance getC() {
			return this.c;
		}

		public setRealOutputDerivatives_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public int getRef_ordersSize() {
			return (this.ref_orders == null) ? 0 : this.ref_orders.size();
		}

		public void putToRef_orders(int key, int val) {
			if (this.ref_orders == null) {
				this.ref_orders = new java.util.HashMap<java.lang.Integer, java.lang.Integer>();
			}
			this.ref_orders.put(key, val);
		}

		public java.util.Map<java.lang.Integer, java.lang.Integer> getRef_orders() {
			return this.ref_orders;
		}

		public setRealOutputDerivatives_args setRef_orders(
				java.util.Map<java.lang.Integer, java.lang.Integer> ref_orders) {
			this.ref_orders = ref_orders;
			return this;
		}

		public void unsetRef_orders() {
			this.ref_orders = null;
		}

		/**
		 * Returns true if field ref_orders is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRef_orders() {
			return this.ref_orders != null;
		}

		public void setRef_ordersIsSet(boolean value) {
			if (!value) {
				this.ref_orders = null;
			}
		}

		public int getRef_valuesSize() {
			return (this.ref_values == null) ? 0 : this.ref_values.size();
		}

		public void putToRef_values(int key, double val) {
			if (this.ref_values == null) {
				this.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>();
			}
			this.ref_values.put(key, val);
		}

		public java.util.Map<java.lang.Integer, java.lang.Double> getRef_values() {
			return this.ref_values;
		}

		public setRealOutputDerivatives_args setRef_values(
				java.util.Map<java.lang.Integer, java.lang.Double> ref_values) {
			this.ref_values = ref_values;
			return this;
		}

		public void unsetRef_values() {
			this.ref_values = null;
		}

		/**
		 * Returns true if field ref_values is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRef_values() {
			return this.ref_values != null;
		}

		public void setRef_valuesIsSet(boolean value) {
			if (!value) {
				this.ref_values = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case REF_ORDERS:
				if (value == null) {
					unsetRef_orders();
				} else {
					setRef_orders((java.util.Map<java.lang.Integer, java.lang.Integer>) value);
				}
				break;

			case REF_VALUES:
				if (value == null) {
					unsetRef_values();
				} else {
					setRef_values((java.util.Map<java.lang.Integer, java.lang.Double>) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case REF_ORDERS:
				return getRef_orders();

			case REF_VALUES:
				return getRef_values();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case REF_ORDERS:
				return isSetRef_orders();
			case REF_VALUES:
				return isSetRef_values();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setRealOutputDerivatives_args)
				return this.equals((setRealOutputDerivatives_args) that);
			return false;
		}

		public boolean equals(setRealOutputDerivatives_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_ref_orders = true && this.isSetRef_orders();
			boolean that_present_ref_orders = true && that.isSetRef_orders();
			if (this_present_ref_orders || that_present_ref_orders) {
				if (!(this_present_ref_orders && that_present_ref_orders))
					return false;
				if (!this.ref_orders.equals(that.ref_orders))
					return false;
			}

			boolean this_present_ref_values = true && this.isSetRef_values();
			boolean that_present_ref_values = true && that.isSetRef_values();
			if (this_present_ref_values || that_present_ref_values) {
				if (!(this_present_ref_values && that_present_ref_values))
					return false;
				if (!this.ref_values.equals(that.ref_values))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetRef_orders()) ? 131071 : 524287);
			if (isSetRef_orders())
				hashCode = hashCode * 8191 + ref_orders.hashCode();

			hashCode = hashCode * 8191 + ((isSetRef_values()) ? 131071 : 524287);
			if (isSetRef_values())
				hashCode = hashCode * 8191 + ref_values.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setRealOutputDerivatives_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRef_orders()).compareTo(other.isSetRef_orders());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRef_orders()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_orders, other.ref_orders);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRef_values()).compareTo(other.isSetRef_values());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRef_values()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_values, other.ref_values);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setRealOutputDerivatives_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ref_orders:");
			if (this.ref_orders == null) {
				sb.append("null");
			} else {
				sb.append(this.ref_orders);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ref_values:");
			if (this.ref_values == null) {
				sb.append("null");
			} else {
				sb.append(this.ref_values);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRealOutputDerivatives_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setRealOutputDerivatives_argsStandardScheme getScheme() {
				return new setRealOutputDerivatives_argsStandardScheme();
			}
		}

		private static class setRealOutputDerivatives_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setRealOutputDerivatives_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRealOutputDerivatives_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REF_ORDERS
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map124 = iprot.readMapBegin();
								struct.ref_orders = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(
										2 * _map124.size);
								int _key125;
								int _val126;
								for (int _i127 = 0; _i127 < _map124.size; ++_i127) {
									_key125 = iprot.readI32();
									_val126 = iprot.readI32();
									struct.ref_orders.put(_key125, _val126);
								}
								iprot.readMapEnd();
							}
							struct.setRef_ordersIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // REF_VALUES
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map128 = iprot.readMapBegin();
								struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>(
										2 * _map128.size);
								int _key129;
								double _val130;
								for (int _i131 = 0; _i131 < _map128.size; ++_i131) {
									_key129 = iprot.readI32();
									_val130 = iprot.readDouble();
									struct.ref_values.put(_key129, _val130);
								}
								iprot.readMapEnd();
							}
							struct.setRef_valuesIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRealOutputDerivatives_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.ref_orders != null) {
					oprot.writeFieldBegin(REF_ORDERS_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,
								org.apache.thrift.protocol.TType.I32, struct.ref_orders.size()));
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter132 : struct.ref_orders
								.entrySet()) {
							oprot.writeI32(_iter132.getKey());
							oprot.writeI32(_iter132.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.ref_values != null) {
					oprot.writeFieldBegin(REF_VALUES_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,
								org.apache.thrift.protocol.TType.DOUBLE, struct.ref_values.size()));
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter133 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter133.getKey());
							oprot.writeDouble(_iter133.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRealOutputDerivatives_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setRealOutputDerivatives_argsTupleScheme getScheme() {
				return new setRealOutputDerivatives_argsTupleScheme();
			}
		}

		private static class setRealOutputDerivatives_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setRealOutputDerivatives_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRealOutputDerivatives_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetRef_orders()) {
					optionals.set(1);
				}
				if (struct.isSetRef_values()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetRef_orders()) {
					{
						oprot.writeI32(struct.ref_orders.size());
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter134 : struct.ref_orders
								.entrySet()) {
							oprot.writeI32(_iter134.getKey());
							oprot.writeI32(_iter134.getValue());
						}
					}
				}
				if (struct.isSetRef_values()) {
					{
						oprot.writeI32(struct.ref_values.size());
						for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter135 : struct.ref_values
								.entrySet()) {
							oprot.writeI32(_iter135.getKey());
							oprot.writeDouble(_iter135.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRealOutputDerivatives_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TMap _map136 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32,
								iprot.readI32());
						struct.ref_orders = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(
								2 * _map136.size);
						int _key137;
						int _val138;
						for (int _i139 = 0; _i139 < _map136.size; ++_i139) {
							_key137 = iprot.readI32();
							_val138 = iprot.readI32();
							struct.ref_orders.put(_key137, _val138);
						}
					}
					struct.setRef_ordersIsSet(true);
				}
				if (incoming.get(2)) {
					{
						org.apache.thrift.protocol.TMap _map140 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE,
								iprot.readI32());
						struct.ref_values = new java.util.HashMap<java.lang.Integer, java.lang.Double>(
								2 * _map140.size);
						int _key141;
						double _val142;
						for (int _i143 = 0; _i143 < _map140.size; ++_i143) {
							_key141 = iprot.readI32();
							_val142 = iprot.readDouble();
							struct.ref_values.put(_key141, _val142);
						}
					}
					struct.setRef_valuesIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setRealOutputDerivatives_result implements
			org.apache.thrift.TBase<setRealOutputDerivatives_result, setRealOutputDerivatives_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setRealOutputDerivatives_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRealOutputDerivatives_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRealOutputDerivatives_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRealOutputDerivatives_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRealOutputDerivatives_result.class,
					metaDataMap);
		}

		public setRealOutputDerivatives_result() {
		}

		public setRealOutputDerivatives_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRealOutputDerivatives_result(setRealOutputDerivatives_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public setRealOutputDerivatives_result deepCopy() {
			return new setRealOutputDerivatives_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public setRealOutputDerivatives_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setRealOutputDerivatives_result)
				return this.equals((setRealOutputDerivatives_result) that);
			return false;
		}

		public boolean equals(setRealOutputDerivatives_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(setRealOutputDerivatives_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setRealOutputDerivatives_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRealOutputDerivatives_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setRealOutputDerivatives_resultStandardScheme getScheme() {
				return new setRealOutputDerivatives_resultStandardScheme();
			}
		}

		private static class setRealOutputDerivatives_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setRealOutputDerivatives_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRealOutputDerivatives_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRealOutputDerivatives_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRealOutputDerivatives_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setRealOutputDerivatives_resultTupleScheme getScheme() {
				return new setRealOutputDerivatives_resultTupleScheme();
			}
		}

		private static class setRealOutputDerivatives_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setRealOutputDerivatives_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRealOutputDerivatives_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRealOutputDerivatives_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class cancelStep_args implements org.apache.thrift.TBase<cancelStep_args, cancelStep_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<cancelStep_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelStep_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelStep_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelStep_argsTupleSchemeFactory();

		public Instance c; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelStep_args.class, metaDataMap);
		}

		public cancelStep_args() {
		}

		public cancelStep_args(Instance c) {
			this();
			this.c = c;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelStep_args(cancelStep_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
		}

		public cancelStep_args deepCopy() {
			return new cancelStep_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
		}

		public Instance getC() {
			return this.c;
		}

		public cancelStep_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelStep_args)
				return this.equals((cancelStep_args) that);
			return false;
		}

		public boolean equals(cancelStep_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(cancelStep_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelStep_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelStep_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public cancelStep_argsStandardScheme getScheme() {
				return new cancelStep_argsStandardScheme();
			}
		}

		private static class cancelStep_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<cancelStep_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelStep_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelStep_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelStep_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public cancelStep_argsTupleScheme getScheme() {
				return new cancelStep_argsTupleScheme();
			}
		}

		private static class cancelStep_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelStep_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelStep_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelStep_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class cancelStep_result
			implements org.apache.thrift.TBase<cancelStep_result, cancelStep_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<cancelStep_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelStep_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelStep_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelStep_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelStep_result.class, metaDataMap);
		}

		public cancelStep_result() {
		}

		public cancelStep_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelStep_result(cancelStep_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public cancelStep_result deepCopy() {
			return new cancelStep_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public cancelStep_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelStep_result)
				return this.equals((cancelStep_result) that);
			return false;
		}

		public boolean equals(cancelStep_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(cancelStep_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelStep_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelStep_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public cancelStep_resultStandardScheme getScheme() {
				return new cancelStep_resultStandardScheme();
			}
		}

		private static class cancelStep_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<cancelStep_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelStep_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelStep_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelStep_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public cancelStep_resultTupleScheme getScheme() {
				return new cancelStep_resultTupleScheme();
			}
		}

		private static class cancelStep_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<cancelStep_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelStep_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelStep_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class doStep_args implements org.apache.thrift.TBase<doStep_args, doStep_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<doStep_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"doStep_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField CURRENT_COMMUNICATION_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"currentCommunicationPoint", org.apache.thrift.protocol.TType.DOUBLE, (short) 2);
		private static final org.apache.thrift.protocol.TField COMMUNICATION_STEP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"communicationStepSize", org.apache.thrift.protocol.TType.DOUBLE, (short) 3);
		private static final org.apache.thrift.protocol.TField NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"noSetFMUStatePriorToCurrentPoint", org.apache.thrift.protocol.TType.BOOL, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new doStep_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new doStep_argsTupleSchemeFactory();

		public Instance c; // required
		public double currentCommunicationPoint; // required
		public double communicationStepSize; // required
		public boolean noSetFMUStatePriorToCurrentPoint; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"), CURRENT_COMMUNICATION_POINT((short) 2, "currentCommunicationPoint"),
			COMMUNICATION_STEP_SIZE((short) 3, "communicationStepSize"),
			NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT((short) 4, "noSetFMUStatePriorToCurrentPoint");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // CURRENT_COMMUNICATION_POINT
					return CURRENT_COMMUNICATION_POINT;
				case 3: // COMMUNICATION_STEP_SIZE
					return COMMUNICATION_STEP_SIZE;
				case 4: // NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT
					return NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __CURRENTCOMMUNICATIONPOINT_ISSET_ID = 0;
		private static final int __COMMUNICATIONSTEPSIZE_ISSET_ID = 1;
		private static final int __NOSETFMUSTATEPRIORTOCURRENTPOINT_ISSET_ID = 2;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.CURRENT_COMMUNICATION_POINT, new org.apache.thrift.meta_data.FieldMetaData(
					"currentCommunicationPoint", org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
			tmpMap.put(_Fields.COMMUNICATION_STEP_SIZE, new org.apache.thrift.meta_data.FieldMetaData(
					"communicationStepSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
			tmpMap.put(_Fields.NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT,
					new org.apache.thrift.meta_data.FieldMetaData("noSetFMUStatePriorToCurrentPoint",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doStep_args.class, metaDataMap);
		}

		public doStep_args() {
		}

		public doStep_args(Instance c, double currentCommunicationPoint, double communicationStepSize,
				boolean noSetFMUStatePriorToCurrentPoint) {
			this();
			this.c = c;
			this.currentCommunicationPoint = currentCommunicationPoint;
			setCurrentCommunicationPointIsSet(true);
			this.communicationStepSize = communicationStepSize;
			setCommunicationStepSizeIsSet(true);
			this.noSetFMUStatePriorToCurrentPoint = noSetFMUStatePriorToCurrentPoint;
			setNoSetFMUStatePriorToCurrentPointIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public doStep_args(doStep_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			this.currentCommunicationPoint = other.currentCommunicationPoint;
			this.communicationStepSize = other.communicationStepSize;
			this.noSetFMUStatePriorToCurrentPoint = other.noSetFMUStatePriorToCurrentPoint;
		}

		public doStep_args deepCopy() {
			return new doStep_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			setCurrentCommunicationPointIsSet(false);
			this.currentCommunicationPoint = 0.0;
			setCommunicationStepSizeIsSet(false);
			this.communicationStepSize = 0.0;
			setNoSetFMUStatePriorToCurrentPointIsSet(false);
			this.noSetFMUStatePriorToCurrentPoint = false;
		}

		public Instance getC() {
			return this.c;
		}

		public doStep_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		public double getCurrentCommunicationPoint() {
			return this.currentCommunicationPoint;
		}

		public doStep_args setCurrentCommunicationPoint(double currentCommunicationPoint) {
			this.currentCommunicationPoint = currentCommunicationPoint;
			setCurrentCommunicationPointIsSet(true);
			return this;
		}

		public void unsetCurrentCommunicationPoint() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield,
					__CURRENTCOMMUNICATIONPOINT_ISSET_ID);
		}

		/**
		 * Returns true if field currentCommunicationPoint is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetCurrentCommunicationPoint() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENTCOMMUNICATIONPOINT_ISSET_ID);
		}

		public void setCurrentCommunicationPointIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield,
					__CURRENTCOMMUNICATIONPOINT_ISSET_ID, value);
		}

		public double getCommunicationStepSize() {
			return this.communicationStepSize;
		}

		public doStep_args setCommunicationStepSize(double communicationStepSize) {
			this.communicationStepSize = communicationStepSize;
			setCommunicationStepSizeIsSet(true);
			return this;
		}

		public void unsetCommunicationStepSize() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield,
					__COMMUNICATIONSTEPSIZE_ISSET_ID);
		}

		/**
		 * Returns true if field communicationStepSize is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetCommunicationStepSize() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMUNICATIONSTEPSIZE_ISSET_ID);
		}

		public void setCommunicationStepSizeIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield,
					__COMMUNICATIONSTEPSIZE_ISSET_ID, value);
		}

		public boolean isNoSetFMUStatePriorToCurrentPoint() {
			return this.noSetFMUStatePriorToCurrentPoint;
		}

		public doStep_args setNoSetFMUStatePriorToCurrentPoint(boolean noSetFMUStatePriorToCurrentPoint) {
			this.noSetFMUStatePriorToCurrentPoint = noSetFMUStatePriorToCurrentPoint;
			setNoSetFMUStatePriorToCurrentPointIsSet(true);
			return this;
		}

		public void unsetNoSetFMUStatePriorToCurrentPoint() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield,
					__NOSETFMUSTATEPRIORTOCURRENTPOINT_ISSET_ID);
		}

		/**
		 * Returns true if field noSetFMUStatePriorToCurrentPoint is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSetNoSetFMUStatePriorToCurrentPoint() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield,
					__NOSETFMUSTATEPRIORTOCURRENTPOINT_ISSET_ID);
		}

		public void setNoSetFMUStatePriorToCurrentPointIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield,
					__NOSETFMUSTATEPRIORTOCURRENTPOINT_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case CURRENT_COMMUNICATION_POINT:
				if (value == null) {
					unsetCurrentCommunicationPoint();
				} else {
					setCurrentCommunicationPoint((java.lang.Double) value);
				}
				break;

			case COMMUNICATION_STEP_SIZE:
				if (value == null) {
					unsetCommunicationStepSize();
				} else {
					setCommunicationStepSize((java.lang.Double) value);
				}
				break;

			case NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT:
				if (value == null) {
					unsetNoSetFMUStatePriorToCurrentPoint();
				} else {
					setNoSetFMUStatePriorToCurrentPoint((java.lang.Boolean) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case CURRENT_COMMUNICATION_POINT:
				return getCurrentCommunicationPoint();

			case COMMUNICATION_STEP_SIZE:
				return getCommunicationStepSize();

			case NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT:
				return isNoSetFMUStatePriorToCurrentPoint();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case CURRENT_COMMUNICATION_POINT:
				return isSetCurrentCommunicationPoint();
			case COMMUNICATION_STEP_SIZE:
				return isSetCommunicationStepSize();
			case NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT:
				return isSetNoSetFMUStatePriorToCurrentPoint();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof doStep_args)
				return this.equals((doStep_args) that);
			return false;
		}

		public boolean equals(doStep_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_currentCommunicationPoint = true;
			boolean that_present_currentCommunicationPoint = true;
			if (this_present_currentCommunicationPoint || that_present_currentCommunicationPoint) {
				if (!(this_present_currentCommunicationPoint && that_present_currentCommunicationPoint))
					return false;
				if (this.currentCommunicationPoint != that.currentCommunicationPoint)
					return false;
			}

			boolean this_present_communicationStepSize = true;
			boolean that_present_communicationStepSize = true;
			if (this_present_communicationStepSize || that_present_communicationStepSize) {
				if (!(this_present_communicationStepSize && that_present_communicationStepSize))
					return false;
				if (this.communicationStepSize != that.communicationStepSize)
					return false;
			}

			boolean this_present_noSetFMUStatePriorToCurrentPoint = true;
			boolean that_present_noSetFMUStatePriorToCurrentPoint = true;
			if (this_present_noSetFMUStatePriorToCurrentPoint || that_present_noSetFMUStatePriorToCurrentPoint) {
				if (!(this_present_noSetFMUStatePriorToCurrentPoint && that_present_noSetFMUStatePriorToCurrentPoint))
					return false;
				if (this.noSetFMUStatePriorToCurrentPoint != that.noSetFMUStatePriorToCurrentPoint)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(currentCommunicationPoint);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(communicationStepSize);

			hashCode = hashCode * 8191 + ((noSetFMUStatePriorToCurrentPoint) ? 131071 : 524287);

			return hashCode;
		}

		@Override
		public int compareTo(doStep_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetCurrentCommunicationPoint())
					.compareTo(other.isSetCurrentCommunicationPoint());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCurrentCommunicationPoint()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentCommunicationPoint,
						other.currentCommunicationPoint);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetCommunicationStepSize())
					.compareTo(other.isSetCommunicationStepSize());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCommunicationStepSize()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communicationStepSize,
						other.communicationStepSize);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetNoSetFMUStatePriorToCurrentPoint())
					.compareTo(other.isSetNoSetFMUStatePriorToCurrentPoint());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetNoSetFMUStatePriorToCurrentPoint()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noSetFMUStatePriorToCurrentPoint,
						other.noSetFMUStatePriorToCurrentPoint);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("doStep_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("currentCommunicationPoint:");
			sb.append(this.currentCommunicationPoint);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("communicationStepSize:");
			sb.append(this.communicationStepSize);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("noSetFMUStatePriorToCurrentPoint:");
			sb.append(this.noSetFMUStatePriorToCurrentPoint);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class doStep_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public doStep_argsStandardScheme getScheme() {
				return new doStep_argsStandardScheme();
			}
		}

		private static class doStep_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<doStep_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, doStep_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CURRENT_COMMUNICATION_POINT
						if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
							struct.currentCommunicationPoint = iprot.readDouble();
							struct.setCurrentCommunicationPointIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // COMMUNICATION_STEP_SIZE
						if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
							struct.communicationStepSize = iprot.readDouble();
							struct.setCommunicationStepSizeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.noSetFMUStatePriorToCurrentPoint = iprot.readBool();
							struct.setNoSetFMUStatePriorToCurrentPointIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, doStep_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(CURRENT_COMMUNICATION_POINT_FIELD_DESC);
				oprot.writeDouble(struct.currentCommunicationPoint);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(COMMUNICATION_STEP_SIZE_FIELD_DESC);
				oprot.writeDouble(struct.communicationStepSize);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(NO_SET_FMUSTATE_PRIOR_TO_CURRENT_POINT_FIELD_DESC);
				oprot.writeBool(struct.noSetFMUStatePriorToCurrentPoint);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class doStep_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public doStep_argsTupleScheme getScheme() {
				return new doStep_argsTupleScheme();
			}
		}

		private static class doStep_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<doStep_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, doStep_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetCurrentCommunicationPoint()) {
					optionals.set(1);
				}
				if (struct.isSetCommunicationStepSize()) {
					optionals.set(2);
				}
				if (struct.isSetNoSetFMUStatePriorToCurrentPoint()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetCurrentCommunicationPoint()) {
					oprot.writeDouble(struct.currentCommunicationPoint);
				}
				if (struct.isSetCommunicationStepSize()) {
					oprot.writeDouble(struct.communicationStepSize);
				}
				if (struct.isSetNoSetFMUStatePriorToCurrentPoint()) {
					oprot.writeBool(struct.noSetFMUStatePriorToCurrentPoint);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, doStep_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					struct.currentCommunicationPoint = iprot.readDouble();
					struct.setCurrentCommunicationPointIsSet(true);
				}
				if (incoming.get(2)) {
					struct.communicationStepSize = iprot.readDouble();
					struct.setCommunicationStepSizeIsSet(true);
				}
				if (incoming.get(3)) {
					struct.noSetFMUStatePriorToCurrentPoint = iprot.readBool();
					struct.setNoSetFMUStatePriorToCurrentPointIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class doStep_result implements org.apache.thrift.TBase<doStep_result, doStep_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<doStep_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"doStep_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new doStep_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new doStep_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doStep_result.class, metaDataMap);
		}

		public doStep_result() {
		}

		public doStep_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public doStep_result(doStep_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public doStep_result deepCopy() {
			return new doStep_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public doStep_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof doStep_result)
				return this.equals((doStep_result) that);
			return false;
		}

		public boolean equals(doStep_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(doStep_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("doStep_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class doStep_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public doStep_resultStandardScheme getScheme() {
				return new doStep_resultStandardScheme();
			}
		}

		private static class doStep_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<doStep_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, doStep_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, doStep_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class doStep_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public doStep_resultTupleScheme getScheme() {
				return new doStep_resultTupleScheme();
			}
		}

		private static class doStep_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<doStep_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, doStep_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, doStep_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getStatus_args implements org.apache.thrift.TBase<getStatus_args, getStatus_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getStatus_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStatus_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s",
				org.apache.thrift.protocol.TType.I32, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStatus_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStatus_argsTupleSchemeFactory();

		public Instance c; // required
		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind s; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"),
			/**
			 * 
			 * @see StatusKind
			 */
			S((short) 2, "s");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // S
					return S;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.S,
					new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
									StatusKind.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_args.class, metaDataMap);
		}

		public getStatus_args() {
		}

		public getStatus_args(Instance c, StatusKind s) {
			this();
			this.c = c;
			this.s = s;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStatus_args(getStatus_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetS()) {
				this.s = other.s;
			}
		}

		public getStatus_args deepCopy() {
			return new getStatus_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.s = null;
		}

		public Instance getC() {
			return this.c;
		}

		public getStatus_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind getS() {
			return this.s;
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public getStatus_args setS(StatusKind s) {
			this.s = s;
			return this;
		}

		public void unsetS() {
			this.s = null;
		}

		/**
		 * Returns true if field s is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetS() {
			return this.s != null;
		}

		public void setSIsSet(boolean value) {
			if (!value) {
				this.s = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case S:
				if (value == null) {
					unsetS();
				} else {
					setS((StatusKind) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case S:
				return getS();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case S:
				return isSetS();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getStatus_args)
				return this.equals((getStatus_args) that);
			return false;
		}

		public boolean equals(getStatus_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_s = true && this.isSetS();
			boolean that_present_s = true && that.isSetS();
			if (this_present_s || that_present_s) {
				if (!(this_present_s && that_present_s))
					return false;
				if (!this.s.equals(that.s))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetS()) ? 131071 : 524287);
			if (isSetS())
				hashCode = hashCode * 8191 + s.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(getStatus_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetS()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getStatus_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("s:");
			if (this.s == null) {
				sb.append("null");
			} else {
				sb.append(this.s);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getStatus_argsStandardScheme getScheme() {
				return new getStatus_argsStandardScheme();
			}
		}

		private static class getStatus_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getStatus_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // S
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
							struct.setSIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.s != null) {
					oprot.writeFieldBegin(S_FIELD_DESC);
					oprot.writeI32(struct.s.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getStatus_argsTupleScheme getScheme() {
				return new getStatus_argsTupleScheme();
			}
		}

		private static class getStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStatus_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetS()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetS()) {
					oprot.writeI32(struct.s.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
					struct.setSIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getStatus_result implements org.apache.thrift.TBase<getStatus_result, getStatus_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getStatus_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStatus_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStatus_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStatus_resultTupleSchemeFactory();

		/**
		 * 
		 * @see Status
		 */
		public Status success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Status
			 */
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_result.class, metaDataMap);
		}

		public getStatus_result() {
		}

		public getStatus_result(Status success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStatus_result(getStatus_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public getStatus_result deepCopy() {
			return new getStatus_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Status
		 */
		public Status getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Status
		 */
		public getStatus_result setSuccess(Status success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Status) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getStatus_result)
				return this.equals((getStatus_result) that);
			return false;
		}

		public boolean equals(getStatus_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(getStatus_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getStatus_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getStatus_resultStandardScheme getScheme() {
				return new getStatus_resultStandardScheme();
			}
		}

		private static class getStatus_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getStatus_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getStatus_resultTupleScheme getScheme() {
				return new getStatus_resultTupleScheme();
			}
		}

		private static class getStatus_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getStatus_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = org.raspinloop.emulator.proxyserver.fmi.Status.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getIntegerStatus_args
			implements org.apache.thrift.TBase<getIntegerStatus_args, getIntegerStatus_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getIntegerStatus_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getIntegerStatus_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s",
				org.apache.thrift.protocol.TType.I32, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getIntegerStatus_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getIntegerStatus_argsTupleSchemeFactory();

		public Instance c; // required
		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind s; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"),
			/**
			 * 
			 * @see StatusKind
			 */
			S((short) 2, "s");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // S
					return S;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.S,
					new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
									StatusKind.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntegerStatus_args.class, metaDataMap);
		}

		public getIntegerStatus_args() {
		}

		public getIntegerStatus_args(Instance c, StatusKind s) {
			this();
			this.c = c;
			this.s = s;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getIntegerStatus_args(getIntegerStatus_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetS()) {
				this.s = other.s;
			}
		}

		public getIntegerStatus_args deepCopy() {
			return new getIntegerStatus_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.s = null;
		}

		public Instance getC() {
			return this.c;
		}

		public getIntegerStatus_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind getS() {
			return this.s;
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public getIntegerStatus_args setS(StatusKind s) {
			this.s = s;
			return this;
		}

		public void unsetS() {
			this.s = null;
		}

		/**
		 * Returns true if field s is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetS() {
			return this.s != null;
		}

		public void setSIsSet(boolean value) {
			if (!value) {
				this.s = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case S:
				if (value == null) {
					unsetS();
				} else {
					setS((StatusKind) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case S:
				return getS();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case S:
				return isSetS();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getIntegerStatus_args)
				return this.equals((getIntegerStatus_args) that);
			return false;
		}

		public boolean equals(getIntegerStatus_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_s = true && this.isSetS();
			boolean that_present_s = true && that.isSetS();
			if (this_present_s || that_present_s) {
				if (!(this_present_s && that_present_s))
					return false;
				if (!this.s.equals(that.s))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetS()) ? 131071 : 524287);
			if (isSetS())
				hashCode = hashCode * 8191 + s.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(getIntegerStatus_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetS()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getIntegerStatus_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("s:");
			if (this.s == null) {
				sb.append("null");
			} else {
				sb.append(this.s);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getIntegerStatus_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getIntegerStatus_argsStandardScheme getScheme() {
				return new getIntegerStatus_argsStandardScheme();
			}
		}

		private static class getIntegerStatus_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getIntegerStatus_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getIntegerStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // S
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
							struct.setSIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getIntegerStatus_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.s != null) {
					oprot.writeFieldBegin(S_FIELD_DESC);
					oprot.writeI32(struct.s.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getIntegerStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getIntegerStatus_argsTupleScheme getScheme() {
				return new getIntegerStatus_argsTupleScheme();
			}
		}

		private static class getIntegerStatus_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getIntegerStatus_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getIntegerStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetS()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetS()) {
					oprot.writeI32(struct.s.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getIntegerStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
					struct.setSIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getIntegerStatus_result
			implements org.apache.thrift.TBase<getIntegerStatus_result, getIntegerStatus_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getIntegerStatus_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getIntegerStatus_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getIntegerStatus_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getIntegerStatus_resultTupleSchemeFactory();

		public int success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntegerStatus_result.class, metaDataMap);
		}

		public getIntegerStatus_result() {
		}

		public getIntegerStatus_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getIntegerStatus_result(getIntegerStatus_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public getIntegerStatus_result deepCopy() {
			return new getIntegerStatus_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public getIntegerStatus_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.lang.Integer) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getIntegerStatus_result)
				return this.equals((getIntegerStatus_result) that);
			return false;
		}

		public boolean equals(getIntegerStatus_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + success;

			return hashCode;
		}

		@Override
		public int compareTo(getIntegerStatus_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getIntegerStatus_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getIntegerStatus_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getIntegerStatus_resultStandardScheme getScheme() {
				return new getIntegerStatus_resultStandardScheme();
			}
		}

		private static class getIntegerStatus_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getIntegerStatus_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getIntegerStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getIntegerStatus_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getIntegerStatus_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getIntegerStatus_resultTupleScheme getScheme() {
				return new getIntegerStatus_resultTupleScheme();
			}
		}

		private static class getIntegerStatus_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getIntegerStatus_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getIntegerStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getIntegerStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getRealStatus_args
			implements org.apache.thrift.TBase<getRealStatus_args, getRealStatus_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getRealStatus_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRealStatus_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s",
				org.apache.thrift.protocol.TType.I32, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRealStatus_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRealStatus_argsTupleSchemeFactory();

		public Instance c; // required
		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind s; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"),
			/**
			 * 
			 * @see StatusKind
			 */
			S((short) 2, "s");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // S
					return S;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.S,
					new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
									StatusKind.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRealStatus_args.class, metaDataMap);
		}

		public getRealStatus_args() {
		}

		public getRealStatus_args(Instance c, StatusKind s) {
			this();
			this.c = c;
			this.s = s;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRealStatus_args(getRealStatus_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetS()) {
				this.s = other.s;
			}
		}

		public getRealStatus_args deepCopy() {
			return new getRealStatus_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.s = null;
		}

		public Instance getC() {
			return this.c;
		}

		public getRealStatus_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind getS() {
			return this.s;
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public getRealStatus_args setS(StatusKind s) {
			this.s = s;
			return this;
		}

		public void unsetS() {
			this.s = null;
		}

		/**
		 * Returns true if field s is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetS() {
			return this.s != null;
		}

		public void setSIsSet(boolean value) {
			if (!value) {
				this.s = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case S:
				if (value == null) {
					unsetS();
				} else {
					setS((StatusKind) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case S:
				return getS();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case S:
				return isSetS();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRealStatus_args)
				return this.equals((getRealStatus_args) that);
			return false;
		}

		public boolean equals(getRealStatus_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_s = true && this.isSetS();
			boolean that_present_s = true && that.isSetS();
			if (this_present_s || that_present_s) {
				if (!(this_present_s && that_present_s))
					return false;
				if (!this.s.equals(that.s))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetS()) ? 131071 : 524287);
			if (isSetS())
				hashCode = hashCode * 8191 + s.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(getRealStatus_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetS()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRealStatus_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("s:");
			if (this.s == null) {
				sb.append("null");
			} else {
				sb.append(this.s);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRealStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRealStatus_argsStandardScheme getScheme() {
				return new getRealStatus_argsStandardScheme();
			}
		}

		private static class getRealStatus_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRealStatus_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRealStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // S
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
							struct.setSIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRealStatus_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.s != null) {
					oprot.writeFieldBegin(S_FIELD_DESC);
					oprot.writeI32(struct.s.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRealStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRealStatus_argsTupleScheme getScheme() {
				return new getRealStatus_argsTupleScheme();
			}
		}

		private static class getRealStatus_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getRealStatus_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRealStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetS()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetS()) {
					oprot.writeI32(struct.s.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRealStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
					struct.setSIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getRealStatus_result
			implements org.apache.thrift.TBase<getRealStatus_result, getRealStatus_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getRealStatus_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRealStatus_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.DOUBLE, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRealStatus_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRealStatus_resultTupleSchemeFactory();

		public double success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRealStatus_result.class, metaDataMap);
		}

		public getRealStatus_result() {
		}

		public getRealStatus_result(double success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRealStatus_result(getRealStatus_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public getRealStatus_result deepCopy() {
			return new getRealStatus_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0.0;
		}

		public double getSuccess() {
			return this.success;
		}

		public getRealStatus_result setSuccess(double success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.lang.Double) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRealStatus_result)
				return this.equals((getRealStatus_result) that);
			return false;
		}

		public boolean equals(getRealStatus_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

			return hashCode;
		}

		@Override
		public int compareTo(getRealStatus_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRealStatus_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRealStatus_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getRealStatus_resultStandardScheme getScheme() {
				return new getRealStatus_resultStandardScheme();
			}
		}

		private static class getRealStatus_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRealStatus_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRealStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
							struct.success = iprot.readDouble();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRealStatus_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeDouble(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRealStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRealStatus_resultTupleScheme getScheme() {
				return new getRealStatus_resultTupleScheme();
			}
		}

		private static class getRealStatus_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getRealStatus_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRealStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeDouble(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRealStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readDouble();
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBooleanStatus_args
			implements org.apache.thrift.TBase<getBooleanStatus_args, getBooleanStatus_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getBooleanStatus_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBooleanStatus_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s",
				org.apache.thrift.protocol.TType.I32, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBooleanStatus_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBooleanStatus_argsTupleSchemeFactory();

		public Instance c; // required
		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind s; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"),
			/**
			 * 
			 * @see StatusKind
			 */
			S((short) 2, "s");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // S
					return S;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.S,
					new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
									StatusKind.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBooleanStatus_args.class, metaDataMap);
		}

		public getBooleanStatus_args() {
		}

		public getBooleanStatus_args(Instance c, StatusKind s) {
			this();
			this.c = c;
			this.s = s;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBooleanStatus_args(getBooleanStatus_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetS()) {
				this.s = other.s;
			}
		}

		public getBooleanStatus_args deepCopy() {
			return new getBooleanStatus_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.s = null;
		}

		public Instance getC() {
			return this.c;
		}

		public getBooleanStatus_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind getS() {
			return this.s;
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public getBooleanStatus_args setS(StatusKind s) {
			this.s = s;
			return this;
		}

		public void unsetS() {
			this.s = null;
		}

		/**
		 * Returns true if field s is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetS() {
			return this.s != null;
		}

		public void setSIsSet(boolean value) {
			if (!value) {
				this.s = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case S:
				if (value == null) {
					unsetS();
				} else {
					setS((StatusKind) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case S:
				return getS();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case S:
				return isSetS();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBooleanStatus_args)
				return this.equals((getBooleanStatus_args) that);
			return false;
		}

		public boolean equals(getBooleanStatus_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_s = true && this.isSetS();
			boolean that_present_s = true && that.isSetS();
			if (this_present_s || that_present_s) {
				if (!(this_present_s && that_present_s))
					return false;
				if (!this.s.equals(that.s))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetS()) ? 131071 : 524287);
			if (isSetS())
				hashCode = hashCode * 8191 + s.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(getBooleanStatus_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetS()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBooleanStatus_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("s:");
			if (this.s == null) {
				sb.append("null");
			} else {
				sb.append(this.s);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBooleanStatus_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBooleanStatus_argsStandardScheme getScheme() {
				return new getBooleanStatus_argsStandardScheme();
			}
		}

		private static class getBooleanStatus_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBooleanStatus_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBooleanStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // S
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
							struct.setSIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBooleanStatus_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.s != null) {
					oprot.writeFieldBegin(S_FIELD_DESC);
					oprot.writeI32(struct.s.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBooleanStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBooleanStatus_argsTupleScheme getScheme() {
				return new getBooleanStatus_argsTupleScheme();
			}
		}

		private static class getBooleanStatus_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBooleanStatus_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBooleanStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetS()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetS()) {
					oprot.writeI32(struct.s.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBooleanStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
					struct.setSIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBooleanStatus_result
			implements org.apache.thrift.TBase<getBooleanStatus_result, getBooleanStatus_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getBooleanStatus_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBooleanStatus_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBooleanStatus_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBooleanStatus_resultTupleSchemeFactory();

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBooleanStatus_result.class, metaDataMap);
		}

		public getBooleanStatus_result() {
		}

		public getBooleanStatus_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBooleanStatus_result(getBooleanStatus_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public getBooleanStatus_result deepCopy() {
			return new getBooleanStatus_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public getBooleanStatus_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.lang.Boolean) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBooleanStatus_result)
				return this.equals((getBooleanStatus_result) that);
			return false;
		}

		public boolean equals(getBooleanStatus_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

			return hashCode;
		}

		@Override
		public int compareTo(getBooleanStatus_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBooleanStatus_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBooleanStatus_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBooleanStatus_resultStandardScheme getScheme() {
				return new getBooleanStatus_resultStandardScheme();
			}
		}

		private static class getBooleanStatus_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBooleanStatus_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBooleanStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBooleanStatus_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBooleanStatus_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBooleanStatus_resultTupleScheme getScheme() {
				return new getBooleanStatus_resultTupleScheme();
			}
		}

		private static class getBooleanStatus_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBooleanStatus_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBooleanStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBooleanStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getStringStatus_args
			implements org.apache.thrift.TBase<getStringStatus_args, getStringStatus_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getStringStatus_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStringStatus_args");

		private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c",
				org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s",
				org.apache.thrift.protocol.TType.I32, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStringStatus_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStringStatus_argsTupleSchemeFactory();

		public Instance c; // required
		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind s; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			C((short) 1, "c"),
			/**
			 * 
			 * @see StatusKind
			 */
			S((short) 2, "s");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // C
					return C;
				case 2: // S
					return S;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.C,
					new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Instance.class)));
			tmpMap.put(_Fields.S,
					new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
									StatusKind.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStringStatus_args.class, metaDataMap);
		}

		public getStringStatus_args() {
		}

		public getStringStatus_args(Instance c, StatusKind s) {
			this();
			this.c = c;
			this.s = s;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStringStatus_args(getStringStatus_args other) {
			if (other.isSetC()) {
				this.c = new Instance(other.c);
			}
			if (other.isSetS()) {
				this.s = other.s;
			}
		}

		public getStringStatus_args deepCopy() {
			return new getStringStatus_args(this);
		}

		@Override
		public void clear() {
			this.c = null;
			this.s = null;
		}

		public Instance getC() {
			return this.c;
		}

		public getStringStatus_args setC(Instance c) {
			this.c = c;
			return this;
		}

		public void unsetC() {
			this.c = null;
		}

		/**
		 * Returns true if field c is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetC() {
			return this.c != null;
		}

		public void setCIsSet(boolean value) {
			if (!value) {
				this.c = null;
			}
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public StatusKind getS() {
			return this.s;
		}

		/**
		 * 
		 * @see StatusKind
		 */
		public getStringStatus_args setS(StatusKind s) {
			this.s = s;
			return this;
		}

		public void unsetS() {
			this.s = null;
		}

		/**
		 * Returns true if field s is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetS() {
			return this.s != null;
		}

		public void setSIsSet(boolean value) {
			if (!value) {
				this.s = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case C:
				if (value == null) {
					unsetC();
				} else {
					setC((Instance) value);
				}
				break;

			case S:
				if (value == null) {
					unsetS();
				} else {
					setS((StatusKind) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case C:
				return getC();

			case S:
				return getS();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case C:
				return isSetC();
			case S:
				return isSetS();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getStringStatus_args)
				return this.equals((getStringStatus_args) that);
			return false;
		}

		public boolean equals(getStringStatus_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_c = true && this.isSetC();
			boolean that_present_c = true && that.isSetC();
			if (this_present_c || that_present_c) {
				if (!(this_present_c && that_present_c))
					return false;
				if (!this.c.equals(that.c))
					return false;
			}

			boolean this_present_s = true && this.isSetS();
			boolean that_present_s = true && that.isSetS();
			if (this_present_s || that_present_s) {
				if (!(this_present_s && that_present_s))
					return false;
				if (!this.s.equals(that.s))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
			if (isSetC())
				hashCode = hashCode * 8191 + c.hashCode();

			hashCode = hashCode * 8191 + ((isSetS()) ? 131071 : 524287);
			if (isSetS())
				hashCode = hashCode * 8191 + s.getValue();

			return hashCode;
		}

		@Override
		public int compareTo(getStringStatus_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetC()).compareTo(other.isSetC());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetC()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetS()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getStringStatus_args(");
			boolean first = true;

			sb.append("c:");
			if (this.c == null) {
				sb.append("null");
			} else {
				sb.append(this.c);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("s:");
			if (this.s == null) {
				sb.append("null");
			} else {
				sb.append(this.s);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (c != null) {
				c.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getStringStatus_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getStringStatus_argsStandardScheme getScheme() {
				return new getStringStatus_argsStandardScheme();
			}
		}

		private static class getStringStatus_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getStringStatus_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getStringStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // C
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.c = new Instance();
							struct.c.read(iprot);
							struct.setCIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // S
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
							struct.setSIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getStringStatus_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.c != null) {
					oprot.writeFieldBegin(C_FIELD_DESC);
					struct.c.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.s != null) {
					oprot.writeFieldBegin(S_FIELD_DESC);
					oprot.writeI32(struct.s.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStringStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getStringStatus_argsTupleScheme getScheme() {
				return new getStringStatus_argsTupleScheme();
			}
		}

		private static class getStringStatus_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getStringStatus_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getStringStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetC()) {
					optionals.set(0);
				}
				if (struct.isSetS()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetC()) {
					struct.c.write(oprot);
				}
				if (struct.isSetS()) {
					oprot.writeI32(struct.s.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getStringStatus_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.c = new Instance();
					struct.c.read(iprot);
					struct.setCIsSet(true);
				}
				if (incoming.get(1)) {
					struct.s = org.raspinloop.emulator.proxyserver.fmi.StatusKind.findByValue(iprot.readI32());
					struct.setSIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getStringStatus_result
			implements org.apache.thrift.TBase<getStringStatus_result, getStringStatus_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getStringStatus_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStringStatus_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStringStatus_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStringStatus_resultTupleSchemeFactory();

		public java.lang.String success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStringStatus_result.class, metaDataMap);
		}

		public getStringStatus_result() {
		}

		public getStringStatus_result(java.lang.String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStringStatus_result(getStringStatus_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public getStringStatus_result deepCopy() {
			return new getStringStatus_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public java.lang.String getSuccess() {
			return this.success;
		}

		public getStringStatus_result setSuccess(java.lang.String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getStringStatus_result)
				return this.equals((getStringStatus_result) that);
			return false;
		}

		public boolean equals(getStringStatus_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getStringStatus_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getStringStatus_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getStringStatus_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getStringStatus_resultStandardScheme getScheme() {
				return new getStringStatus_resultStandardScheme();
			}
		}

		private static class getStringStatus_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getStringStatus_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getStringStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getStringStatus_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStringStatus_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getStringStatus_resultTupleScheme getScheme() {
				return new getStringStatus_resultTupleScheme();
			}
		}

		private static class getStringStatus_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getStringStatus_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getStringStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getStringStatus_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

}
